#+TITLE: System implementation for OutReach Portal 3.0
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Initialize database for tests
  Before any test is run, the database is populated with two roles and one user
  whose role is admin.
#+NAME: populate_db
#+BEGIN_SRC python
def populate_db():
    admin_role = Role(name="admin", centre_oc=None, centre_nc=None)
    guest_role = Role(name="guest", centre_oc=None, centre_nc=None)
    noc_role = Role(name="noc", centre_oc=None, centre_nc=None)
    reviewer_role = Role(name="reviewer", centre_oc=None, centre_nc=None)
    admin_role.save()
    guest_role.save()
    reviewer_role.save()
    noc_role.save()
    
    admin_name = Name(name=Config.admin_name)
    admin_email = Email(email=Config.admin_email)
    admin_name.save()
    admin_email.save()
    user = User(name=admin_name,
                            email=admin_email,
                            roles=[admin_role, guest_role])
    user.save()

    pending = Status(name="pending")
    pending.save()
    cancelled = Status(name="cancelled")
    cancelled.save()
    completed = Status(name="completed")
    completed.save()
    pending_approval = Status(name="pending for approval")
    pending_approval.save()
    rejected = Status(name="rejected")
    rejected.save()
    approved = Status(name="approved")
    approved.save()

#+END_SRC

* Test Constructor
#+NAME: test_persistent_system_constructor
#+BEGIN_SRC python
class TestSystemConstructor(TestCase):

    persistent_delegate = None

    def initialize_role_set(self):
        self.admin_role = Role(name="admin", centre_oc=None, centre_nc=None)
        self.guest_role = Role(name="guest", centre_oc=None, centre_nc=None)
        self.noc_role = Role(name="noc", centre_oc=None, centre_nc=None)
        self.reviewer_role = Role(name="reviewer", centre_oc=None, centre_nc=None)
        self.admin_role.save()
        self.guest_role.save()
        self.reviewer_role.save()
        self.noc_role.save()
        return Role.query.all()

    def initialize_user_set(self):
        admin_name = Name(name=Config.admin_name)
        admin_email = Email(email=Config.admin_email)
        admin_name.save()
        admin_email.save()
        role_admin = Role.get_by_id(1)
        role_guest = Role.get_by_id(2)
        self.admin_user = User(name=admin_name,
                          email=admin_email,
                          roles=[role_admin, role_guest], user_status="active")
        self.admin_user.save()
        return User.get_all()

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        self.initialize_role_set()
        self.initialize_user_set()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

   
    def test_system_constructor(self):
        print "test_system_constructor"
        self.assertEqual(System.delegate.user_set[0].get("name").get("name"),
                         Config.admin_name)
        self.assertEqual(System.delegate.user_set[0].get("email").get("email"),
                         "app-admin@vlabs.ac.in")
        self.assertEqual(System.delegate.user_set[0].get('roles')[0].get('name'),
                         "admin")

    def test_is_session_admin(self):
        print "test_is_session_admin"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        self.assertEqual(System.is_session_admin(session), True)

    def test_is_session_OC(self):
        print "test_is_session_OCC"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,
                          role=Role(name="OCC",centre_oc=None,centre_nc=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_OCC(session), True)

    def test_is_session_NCC(self):
        print "test_is_session_NCC"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,
                          role=Role(name="NCC",centre_oc=None,centre_nc=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_NCC(session), True)

    def test_is_session_reviewer(self):
        print "test_is_session_reviewer"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.reviewer)
        System.session_set.append(session)
        self.assertEqual(System.is_session_reviewer(session), True)

    def test_is_session_guest(self):
        print "test_is_session_guest"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.guest)
        System.session_set.append(session)
        self.assertEqual(System.is_session_guest(session), True)

    def test_is_session_noc(self):
        print "test_is_session_noc"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.noc)
        System.session_set.append(session)
        self.assertEqual(System.is_session_noc(session), True)

    def test_session_exists(self):
        print "test_session_exists"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user, role=Role.admin)
        System.session_set.append(session)
        self.assertEqual(System.session_exists(session), True)

#+END_SRC

* Test Arity and Type Checks
#+NAME: test_arity_and_types
#+BEGIN_SRC python
class TestSystemArityAndType(TestCase):
    TESTING = True

    def setUp(self):
        System.initialize_system(ObjectDelegate)

    def tearDown(self):
        System.delegate = None

    def test_arity(self):
        print "test_arity"
        with self.assertRaises(ArityError):
            System.arity_check([1,2], 3)

    def test_type_checks(self):
        print "test_type_checks"
        args = {"name": Name(name="Jimi Hendrix"),
                "email": Name(name="Jimi Hendrix")
                }

        arg_types = {"name": is_name,
                     "email": is_email
                     }

        with self.assertRaises(TypeError):
            System.type_check(args, arg_types)

#+END_SRC

* Test AddUser
#+NAME: test_add_user
#+BEGIN_SRC python
class TestAddUser(TestCase):
    TESTING = True
    persistent_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

    def test_add_user_by_admin(self):
        print "test_add_user_by_admin"
        admin_user = User.get_by_id(1)
        admin_role = Role.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)
        name = Name(name="me")
        email = Email(email="abc@gmail.com")
        guest_role = Role.get_by_id(2)
        user = User(name=name, email=email,
                        roles= [guest_role],
                        )

        user = System.do("add_user", user=user, session=session)

        user = User.get_by_id(2)
        self.assertEqual(user.get("name").get("name"), "me")

    def test_add_user_noc_by_admin(self):
        print "test_add_user_by_noc"
        admin_user = User.get_by_id(1)
        admin_role = Role.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        name = Name(name="nocuser")
        name.save()
        email = Email(email="abc@gmail.com")
        email.save()
        noc_role = Role.get_by_id(4)
        noc_user = User(name=name, email=email, \
                        roles=[noc_role])

        noc_user=System.do("add_user", user=noc_user, session=session)
        session_noc = Session(user=noc_user, role=noc_role)
        System.session_set.append(session_noc)

        user = User.get_by_id(2)
        self.assertEqual(user.get("name").get("name"),"nocuser")
    
    def test_add_user_raises_arity_error(self):
        print "test_add_user_raises_arity_error"

        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")

        guest_role = Role.get_by_id(2)
        user = User(name=name, email=email, roles= [guest_role])

        with self.assertRaises(ArityError):
            System.do("add_user", user=user)


    def test_add_user_raises_type_check_error(self):
        print "test_add_user_raises_type_check_error"
        admin_user = User.get_by_id(1)

        admin_role = Role.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")

        guest_role = Role.get_by_id(2)
        user = User(name=name, email=email, roles=[guest_role])

        with self.assertRaises(TypeError):
            System.do("add_user", user=session, session=session)

    def test_add_user_raises_state_error_with_no_session(self):
        print "test_add_user_raises_state_error_with_no_session"

        admin_user = User.get_by_id(1)
        admin_role = Role.get_by_id(1)
        admin_session = Session(user=admin_user, role=admin_role)

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")
        guest_role = Role.get_by_id(2)
        user = User(name=name, email=email, roles=[guest_role])

        with self.assertRaises(StateError):
            System.do("add_user", user=user, session=admin_session)

    def test_add_user_raises_state_error_with_existing_user(self):
        print "test_add_user_raises_state_error_with_existing_user"

        admin_user = User.get_by_id(1)

        admin_role = Role.get_by_id(1)
        admin_session = Session(user=admin_user, role=admin_role)
        System.session_set.append(admin_session)

        name = Name(name="nocuser")
        name.save()
        email = Email(email="abc@gmail.com")
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=name, email=email, roles=[guest_role])
        user.save()

        with self.assertRaises(StateError):
            System.do("add_user", user=user, session=admin_session)
            
#+END_SRC

* Test DeleteUser
#+NAME: test_delete_user
#+BEGIN_SRC python
class TestDeleteUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
    
    def test_delete_admin_user(self):
        print "test_delete_admin_user"
        login_user=User.get_by_id(1)
        login_role = Role.get_by_id(1)

        session = System.do("login",user=login_user,role=login_role)

        name = Name(name="me")
        email = Email(email="abc@gmail.com")
        name.save()
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")

        other_admin_user = System.do("add_user", user=user, session = session)

        System.do("add_role", user = other_admin_user,
                    role = Role.get_by_id(1),
                    session = session)

        System.do("delete_user", user=other_admin_user, session=session)
        self.assertEqual(other_admin_user.get("user_status"),"inactive")
        
    def test_delete_user_by_occ(self):
        print "test_delete_user_by_occ"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name="IIT",address="Delhi")
        institute = System.do("add_institute", institute = inst,
                               session=session)
        oc = System.do("add_oc",institute=institute,session=session)

        name = Name(name="maryoc")
        email = Email(email="mary@gmail.com")
        name.save()
        email.save()

        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")

        oc_user= System.do("add_user", user=user, session=session)
        oc_role = filter(lambda x:x.get('name') == "OCC" and
                         x.get('centre_oc').get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if oc_role:
            oc_user.append_role(oc_role[0])

        oc_session = Session(user=oc_user,role=oc_role[0])
        System.session_set.append(oc_session)

        name1 = Name(name="xyznc")
        name1.save()
        email1 = Email(email="xyz@gmail.com")
        email1.save()


        nc = System.do("add_nc",institute=institute,hub=oc,session=session,
                        workshops = [], nc_target = None)

        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role],
                    user_status="active")

        nc_user= System.do("add_user", user=user, session=session)
        nc_role = filter(lambda x:x.get("name") == "NCC" and
                         x.get("centre_nc").get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if nc_role:
            nc_user.append_role(nc_role[0])

        length = len(User.get_all())
        System.do("delete_user",user=nc_user,session=oc_session)

        self.assertEqual(nc_user.get("user_status"),"inactive")


    def test_delete_user_by_noc(self):
        print "test_delete_user_by_noc"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name="IIT",address="Delhi")
        institute = System.do("add_institute", institute = inst,
                               session=session)
        oc = System.do("add_oc",institute=institute,session=session,
                        spokes=[], oc_target = None)
        
        name = Name(name="maryoc")
        email = Email(email="mary@gmail.com")
        name.save()
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")

        oc_user= System.do("add_user", user = user, session=session)
        

        oc_role = filter(lambda x:x.get('name') == "OCC" and
                         x.get('centre_oc').get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if oc_role:
            oc_user.append_role(oc_role[0])

        name1 = Name(name="xyznc")
        name1.save()
        email1 = Email(email="xyz@gmail.com")
        email1.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role],
                    user_status="active")
        noc_user=System.do("add_user", user = user, session=session)

        noc_user.append_role(Role.noc)

        noc_session = Session(user=noc_user,role=Role.get_by_id(4))
        System.session_set.append(noc_session)

        length = len(User.get_all())
        System.do("delete_user",user=oc_user,session=noc_session)

        self.assertEqual(oc_user.get("user_status"),"inactive")

#+END_SRC

* Test UpdateUser
#+NAME: test_update_user
#+BEGIN_SRC python
class TestUpdateUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
       

    def test_update_user_by_admin(self):
        print "test_update_user_by_admin"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        name = Name(name="me")
        email= Email(email="abc@gmail.com")
        name.save()
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")
        other_user=System.do("add_user", user = user, session=session)
        name3 = Name(name="john")
        name3.save()
        System.do("update_user",name=name3, user=other_user, session=session)
       
        self.assertEqual(other_user.get("name").get("name"), "john")

    def test_update_user_by_occ(self):
        print "test_update_user_by_occ"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name="IIT",address="Madras")
        institute = System.do("add_institute", institute = inst,
                               session=session)
        oc = System.do("add_oc",institute=institute,session=session,
                        spokes=[], oc_target = None)

        name = Name(name="useroc")
        email = Email(email="useroc@gmail.com")
        name.save()
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")
        oc_user=System.do("add_user", user = user, session=session)
        oc_role = filter(lambda x:x.get('name') == "OCC" and
                         x.get('centre_oc').get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if oc_role:
            oc_user.append_role(oc_role[0])

        oc_session = Session(user=oc_user,role=oc_role[0])
        System.session_set.append(oc_session)

        nc = System.do("add_nc",institute=institute,hub=oc,session=session,
                        nc_target = None, workshops = [])
        
        name1 = Name(name="usernc")
        email1 = Email(email="usernc@gmail.com")
        name1.save()
        email1.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role],
                    user_status="active")
        nc_user= System.do("add_user", user=user, session=session)
        nc_role = filter(lambda x:x.get('name') == "NCC" and
                         x.get('centre_nc').get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if nc_role:
            nc_user.append_role(nc_role[0])

        length = len(User.get_all())
        name4= Name(name="jack")
        name4.save()
        System.do("update_user", name=name4, user=nc_user,session=oc_session)
        new_length = len(User.get_all())

        self.assertEqual(nc_user.get("name").get("name"), "jack")


    def test_update_user_by_noc(self):
        print "test_update_user_by_noc"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name="IIT",address="Madras")
        institute = System.do("add_institute", institute = inst,
                               session=session)
        oc = System.do("add_oc",institute=institute,session=session,
                        spokes=[], oc_target = None)
        name = Name(name="useroc")
        name.save()
        email = Email(email="useroc@gmail.com")
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")
        oc_user= System.do("add_user", user = user, session=session)
        oc_role = filter(lambda x:x.get('name') == "OCC" and
                         x.get('centre_oc').get("institute").get("name") ==
                         institute.get("name"), Role.get_all())
        if oc_role:
            oc_user.append_role(oc_role[0])

        name1= Name(name="usernoc")
        name1.save()
        email1= Email(email="usernoc@gmail.com")
        email1.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role],
                    user_status="active")
        noc_user=System.do("add_user", user=user, session=session)
        System.do("add_role",user=noc_user,role=Role.get_by_id(4),
                   session=session)
        noc_session = Session(user=noc_user,role=Role.get_by_id(4))
        System.session_set.append(noc_session)

        name4 = Name(name="jack")
        name4.save()

        System.do("update_user", name=Name.get_by_id(4), user=oc_user,
                   session=noc_session)

        self.assertEqual(oc_user.get("name").get("name"), "jack")


#+END_SRC

* Test AddRole
#+NAME: test_AddRole
#+BEGIN_SRC python
class TestAddRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
        
def test_add_role(self):                                                           
        print "test_add_role"                                                          
        login_user = User.get_by_id(1)                                                 
        login_role = Role.get_by_id(1)                                                 
        sess = System.do("login", user=login_user, role=login_role)                    
                                                                                        
        name = Name(name="some user")                                                   
        email = Email(email="tt@kk.com")                                                
        name.save()                                                                     
        email.save()                                                                    
        guest_role = Role.get_by_id(2)                                                  
        reviewer_role = Role.get_by_id(3)                                               
                                                                                        
        user = User(name=name, email=email, roles=[guest_role])                         
        user.save()                                                                     
                                                                                        
                                                                                        
        System.do("add_role", user=user, role=reviewer_role,                            
                   session=sess)                                                        
        self.assertEqual(len(User.get_by_id(1).get('roles')), 2)

#+END_SRC

* Test login
#+NAME: test_login
#+BEGIN_SRC python
class Testlogin(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
   
    def test_login(self):
        print "test_login"
        login_user=User.get_by_id(1)
        login_role = Role.get_by_id(1)
        System.do("login", user=login_user, role=login_role)
        session=System.session_set[0]
        self.assertEqual(session.get("user").get("name").get("name"), "admin")
        self.assertEqual(session.get("user").get('roles')[0].get('name'),
                         "admin")

#+END_SRC

* Test logout
#+NAME: test_logout
#+BEGIN_SRC python
class Testlogout(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
   
    def test_logout(self):
        print "test_logout"
        login_user= User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        self.assertEqual(len(System.session_set),1)
        System.do("logout",session=session)
        self.assertEqual(System.session_set, [])
#+END_SRC

* Test add_institute
#+NAME: test_AddInstitute
#+BEGIN_SRC python
class TestAddInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
    
    def test_add_institute(self):
        print "test_add_institute"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute=institute,
                                  session=session)
        self.assertEqual(Institute.get_by_id(1).get("name"), "IIIT")


    def test_add_institute_raises_arity_error(self):
        print "test_add_institute_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(ArityError):
            System.do("add_institute", institute=institute)

    def test_add_institute_raises_type_check_error(self):
        print "test_add_institute_raises_type_check_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(TypeError):
            System.do("add_institute", institute=session, session=session)

    def test_add_institute_raises_auth_error(self):
        print "test_add_institute_raises_auth_error"

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")
        guest_role = Role.get_by_id(2)
        reviewer_role = Role.get_by_id(3)
        user = User(name=name, email=email, roles= [guest_role, reviewer_role])

        guest_session = Session(user=user,role=guest_role)
        System.session_set.append(guest_session)
        reviewer_session = Session(user=user,role=reviewer_role)
        System.session_set.append(reviewer_session)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(AuthError):
            System.do("add_institute", institute=institute,
                        session=guest_session)

        with self.assertRaises(AuthError):
            System.do("add_institute", institute=institute,
                        session=reviewer_session)

    def test_add_institute_raises_state_error_with_no_session(self):
        print "test_add_institute_raises_state_error_with_no_session"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(StateError):
            System.do("add_institute", institute=institute, session=session)

    def test_add_institute_raises_state_error_with_existing_institute(self):
        print "test_add_institute_raises_state_error_with_existing"
        "_institute"
        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()

        with self.assertRaises(StateError):
            System.do("add_institute", institute=institute, session=session)

#+END_SRC

* Test add_oc
#+NAME: test_AddOC
#+BEGIN_SRC python
class TestAddOC(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
    
    def test_add_oc(self):
        print "test_add_oc"
        login_user=User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute=institute,
                               session=session)
        oc = System.do("add_oc", institute=institute, session=session)
        self.assertEqual(OC.get_by_id(1).get("institute").get("name"), 
                             Institute.get_by_id(1).get("name"))
        self.assertEqual(self.persistent_delegate.oc_exists(oc), True)

    def test_add_oc_raises_arity_error(self):
        print "test_add_oc_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute=institute,
                                session=session)

        with self.assertRaises(ArityError):
            System.do("add_oc", institute=institute)

    def test_add_oc_raises_type_check_error(self):
        print "test_add_oc_raises_type_check_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(TypeError):
            System.do("add_oc", institute=session, session=session)


    def test_add_oc_raises_auth_error(self):
        print "test_add_oc_raises_auth_error"

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")
        admin_role = Role.get_by_id(1)
        guest_role = Role.get_by_id(2)
        reviewer_role = Role.get_by_id(3)

        user = User(name=name, email=email, roles= [guest_role, reviewer_role])

        admin_session = Session(user=user, role=admin_role)
        System.session_set.append(admin_session)
        guest_session = Session(user=user, role=guest_role)
        System.session_set.append(guest_session)
        reviewer_session = Session(user=user, role=reviewer_role)
        System.session_set.append(reviewer_session)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()
        oc = System.do("add_oc", institute=institute, session=admin_session)
        nc = System.do("add_nc", institute=institute, hub=oc,
                        session=admin_session)

        occ_role = Role.get_by_id(5)
        ncc_role = Role.get_by_id(6)
        occ_session = Session(user=user, role=occ_role)
        System.session_set.append(occ_session)
        ncc_session = Session(user=user, role=ncc_role)
        System.session_set.append(ncc_session)

        with self.assertRaises(AuthError):
            System.do("add_oc", institute=institute,
                        session=guest_session)
        with self.assertRaises(AuthError):
            System.do("add_oc", institute=institute,
                        session=reviewer_session)
        with self.assertRaises(AuthError):
            System.do("add_oc", institute=institute,
                        session=occ_session)
        with self.assertRaises(AuthError):
            System.do("add_oc", institute=institute,
                        session=ncc_session)

    def test_add_oc_raises_state_error_with_no_session(self):
        print "test_add_oc_raises_state_error_with_no_session"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()

        with self.assertRaises(StateError):
            System.do("add_oc", institute=institute, session=session)

    def test_add_oc_raises_state_error_without_an_institute(self):
        print "test_add_oc_raises_state_error_without_an_institute"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        institute = Institute(name="IIIT", address="Hyderabad")

        with self.assertRaises(StateError):
            System.do("add_oc", institute=institute, session=session)


    def test_add_oc_raises_state_error_with_existing_oc(self):
        print "test_add_oc_raises_state_error_with_existing_oc"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()

        oc = OC(institute=institute, spokes=[], oc_targets=[])
        oc.save()

        with self.assertRaises(StateError):
            System.do("add_oc", institute=institute, session=session)

#+END_SRC

* Test AddNC
#+NAME: test_AddNC
#+BEGIN_SRC python
class TestAddNC(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_add_nc(self):
        print "test_add_nc"
        login_user= User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute = institute,
                               session=session)
        oc = System.do("add_oc", institute=institute, session=session)
        nc = System.do("add_nc", institute=institute, hub=oc,
                        session=session)
        self.assertEqual(NC.get_by_id(1).get('institute').get("name"),
                             institute.get("name"))
        self.assertEqual(OC.get_by_id(1).get('spokes')[0].get("institute").get\
                             ("name"), nc.get("institute").get("name"))
        self.assertEqual(self.persistent_delegate.nc_exists(nc), True)

    def test_add_nc_raises_arity_error(self):
        print "test_add_nc_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute=institute,
                                session=session)
        oc = System.do("add_oc", institute=institute, session=session)

        with self.assertRaises(ArityError):
            System.do("add_nc", institute=institute, hub=oc)

    def test_add_nc_raises_type_check_error(self):
        print "test_add_nc_raises_type_check_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute = System.do("add_institute", institute=institute,
                                session=session)
        oc = System.do("add_oc", institute=institute, session=session)

        with self.assertRaises(TypeError):
            System.do("add_nc", institute=session, hub=oc, session=session)

    def test_add_nc_raises_auth_error(self):
        print "test_add_nc_raises_auth_error"

        name = Name(name="nocuser")
        email = Email(email="abc@gmail.com")
        admin_role = Role.get_by_id(1)
        guest_role = Role.get_by_id(2)
        reviewer_role = Role.get_by_id(3)
        noc_role = Role.get_by_id(4)
        user = User(name=name, email=email, roles= [guest_role, reviewer_role])

        admin_session = Session(user=user, role=admin_role)
        System.session_set.append(admin_session)
        guest_session = Session(user=user, role=guest_role)
        System.session_set.append(guest_session)
        reviewer_session = Session(user=user, role=reviewer_role)
        System.session_set.append(reviewer_session)
        noc_session = Session(user=user, role=noc_role)
        System.session_set.append(noc_session)

        institute = Institute(name="NIT", address="Warangal")
        institute.save()
        oc = System.do("add_oc", institute=institute, session=admin_session)
        nc = System.do("add_nc", institute=institute, hub=oc,
                        session=admin_session)

        ncc_role = Role.get_by_id(6)
        ncc_session = Session(user=user, role=ncc_role)
        System.session_set.append(ncc_session)

        with self.assertRaises(AuthError):
            System.do("add_nc", institute=institute, hub=oc,
                        session=guest_session)
        with self.assertRaises(AuthError):
            System.do("add_nc", institute=institute, hub=oc,
                        session=reviewer_session)
        with self.assertRaises(AuthError):
            System.do("add_nc", institute=institute, hub=oc,
                        session=noc_session)
        with self.assertRaises(AuthError):
            System.do("add_nc", institute=institute, hub=oc,
                        session=ncc_session)


    def test_add_nc_raises_state_error_with_no_session(self):
        print "test_add_nc_raises_state_error_with_no_session"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()
        oc = OC(institute=institute, spokes=[], oc_targets=[])
        oc.save()

        with self.assertRaises(StateError):
            System.do("add_nc", institute=institute, hub=oc, session=session)

    def test_add_nc_raises_state_error_without_an_institute(self):
        print "test_add_nc_raises_state_error_without_an_institute"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()
        oc = OC(institute=institute, spokes=[], oc_targets=[])
        oc.save()

        nc_institute = Institute(name="IIT", address="Hyderabad")

        with self.assertRaises(StateError):
            System.do("add_nc", institute=nc_institute, hub=oc, session=session)

    def test_add_nc_raises_state_error_with_existing_nc(self):
        print "test_add_nc_raises_state_error_with_existing_nc"

        admin_role = Role.get_by_id(1)
        admin_user = User.get_by_id(1)
        session = Session(user=admin_user, role=admin_role)
        System.session_set.append(session)

        institute = Institute(name="IIIT", address="Hyderabad")
        institute.save()
        oc = OC(institute=institute, spokes=[], oc_targets=[])
        oc.save()
        nc = NC(institute=institute, hub=oc, nc_targets=[], workshops=[])
        nc.save()

        with self.assertRaises(StateError):
            System.do("add_nc", institute=institute, hub=oc,
                          session=session)
#+END_SRC

* Test update_institute
#+NAME: test_UpdateInstitute
#+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()
    
    def test_update_institute(self):
        print "test_update_institute"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name="IIIT",address="Hyderabad")
        institute = System.do("add_institute", institute = inst, session=session)

        System.do("update_institute",name="NITK",
                   institute=institute,session=session)
        self.assertEqual(institute.get("name"),"NITK")

#+END_SRC

* Test CreateWorkshop
#+NAME: test_CreateWorkshop
#+BEGIN_SRC python
class TestCreateWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_create_workshop(self):
        print "test_create_workshop"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()
               
        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
        
        self.assertEqual(Workshop.get_by_id(1).get("institute").get("name"),
                         inst3.get("name"))

    def test_create_workshop_raises_arity_error(self):
        print "test_create_workshop_raises_arity_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        with self.assertRaises(ArityError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=inst3,
                          status=pending_status, 
                          nc=nc,
                          ws_target=ws_target,
                          date=date
                          )

    def test_create_workshop_raises_type_check_error(self):
        print "test_create_workshop_raises_type_check_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        with self.assertRaises(TypeError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=nc,
                          status=pending_status, 
                          nc=nc,
                          ws_target=ws_target,
                          date=date,
                          session=nc_session
                          )

    def test_create_workshop_raises_auth_error(self):
        print "test_create_workshop_raises_auth_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        with self.assertRaises(AuthError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=inst3,
                          status=pending_status, 
                          nc=nc,
                          ws_target=ws_target,
                          date=date,
                          session=session
                          )

    def test_create_workshop_raises_state_error_with_no_session(self):
        print "test_create_workshop_raises_state_error_with_no_session"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        with self.assertRaises(StateError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=inst3,
                          status=pending_status, 
                          nc=nc,
                          ws_target=ws_target,
                          date=date,
                          session=nc_session
                          )

    def test_create_workshop_raises_state_error_without_an_institute(self):
        print "test_add_oc_raises_state_error_without_an_institute"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        with self.assertRaises(StateError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=inst3,
                          status=pending_status, 
                          nc=nc,
                          ws_target=ws_target,
                          date=date,
                          session=nc_session
                          )

    def test_create_workshop_raises_state_error_without_nc(self):
        print "test_add_oc_raises_state_error_without_nc"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()
        new_nc = NC(institute=inst3, hub=oc, nc_targets=[], workshops=[])
        
        with self.assertRaises(StateError):
            System.do("create_workshop",
                          name="Test workshop",
                          institute=inst3,
                          status=pending_status, 
                          nc=new_nc,
                          ws_target=ws_target,
                          date=date,
                          session=nc_session
                          )

#+END_SRC

* Test CancelWorkshop
#+NAME: test_CancelWorkshop
#+BEGIN_SRC python
class TestCancelWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_cancel_workshop(self):
        print "test_cancel_workshop"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        cancelled_status = Status.get_by_id(2)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()
               
        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()
                     
        System.do("cancel_workshop", workshop = new_workshop,
                   session = nc_session)
        self.assertEqual(Workshop.get_by_id(1).get("status").get("name"),
                         cancelled_status.get("name"))
        self.assertEqual(nc.get("workshops")[0].get("status").get("name"),
                         cancelled_status.get("name"))

    def test_cancel_workshop_raises_arity_error(self):
        print "test_cancel_workshop_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(ArityError):
            System.do("cancel_workshop", workshop=new_workshop)

    def test_cancel_workshop_raises_type_error(self):
        print "test_cancel_workshop_raises_type_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()
 
        with self.assertRaises(TypeError):
            System.do("cancel_workshop", workshop=nc_session,
                                         session=new_workshop)


    def test_cancel_workshop_raises_state_error_with_wrong_status(self):
        print "test_cancel_workshop_raises_state_error_with_wrong_status"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=completed_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(StateError):
            System.do("cancel_workshop", workshop=new_workshop,
                          session=nc_session)

    def test_cancel_workshop_raises_auth_error(self):
        print "test_cancel_workshop_raises_auth_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(AuthError):
            System.do("cancel_workshop", workshop=new_workshop,
                          session=session)

 #+END_SRC

* Test ConductWorkshop
#+NAME: test_ConductWorkshop
#+BEGIN_SRC python
class TestConductWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_conduct_workshop(self):
        print "test_conduct_workshop"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        System.do("conduct_workshop", workshop = workshop,
                   session = nc_session)
        self.assertEqual(workshop.get("status").get("name"),
                         completed_status.get("name"))

    def test_conduct_workshop_raises_arity_error(self):
        print "test_conduct_workshop_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(ArityError):
            System.do("conduct_workshop", workshop=new_workshop)


    def test_conduct_workshop_raises_type_error(self):
        print "test_conduct_workshop_raises_type_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        new_workshop.save()

        with self.assertRaises(TypeError):
            System.do("conduct_workshop", workshop=nc_session,
                                         session=new_workshop)
            
    def test_conduct_workshop_raises_auth_error(self):
        print "test_conduct_workshop_raises_auth_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(AuthError):
            System.do("conduct_workshop", workshop=new_workshop,
                          session=session)

    def test_conduct_workshop_raises_state_error_with_wrong_status(self):
        print "test_conduct_workshop_raises_state_error_with_wrong_status"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=completed_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(StateError):
            System.do("conduct_workshop", workshop=new_workshop,
                          session=nc_session)

 #+END_SRC

* Test RescheduleWorkshop
#+NAME: test_RescheduleWorkshop
#+BEGIN_SRC python
class TestRescheduleWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_reschedule_workshop(self):
        print "test_reschedule_workshop"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=completed_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()
        
        new_target_date = datetime.datetime.strptime("05-07-2016", "%d-%m-%Y").date()
        new_wstarget = WSTarget(usage = 3000, participants = 200, experiments = 20,
                                date = new_target_date, nc_target = nc_target)

        new_wstarget.save()

        System.do("reschedule_workshop", workshop = new_workshop,
                   session = nc_session, wstarget = new_wstarget)

        self.assertEqual(new_workshop.get("status").get("name"),
                         pending_status.pending.get("name"))
        self.assertEqual(new_workshop.get("ws_target").get("date"),
                         new_target_date)

    def test_reschedule_workshop_raises_arity_error(self):
        print "test_reschedule_workshop_raises_arity_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=completed_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()
        
        new_target_date = datetime.datetime.strptime("05-07-2016", "%d-%m-%Y").date()


        new_wstarget = WSTarget(usage = 3000, participants = 200, experiments = 20,
                                date = new_target_date, nc_target = nc_target)

        new_wstarget.save()

        with self.assertRaises(ArityError):
            System.do("reschedule_workshop", workshop = new_workshop,
                        session = nc_session)

    def test_reschedule_workshop_raises_type_error(self):
        print "test_reschedule_workshop_raises_type_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        new_workshop.save()

        with self.assertRaises(TypeError):
            System.do("reschedule_workshop", workshop=nc_session,
                       ws_target=ws_target, session=new_workshop)

    def test_reschedule_workshop_raises_auth_error(self):
        print "test_reschedule_workshop_raises_auth_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(AuthError):
            System.do("reschedule_workshop", workshop=new_workshop,
                        session=session, wstarget=ws_target)

    def test_reschedule_workshop_raises_state_error_with_wrong_status(self):
        print "test_reschedule_workshop_raises_state_error_with_wrong_status"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(2)

        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc,
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                  name="Test workshop",
                                  institute=inst3,
                                  status=pending_status, 
                                  nc=nc,
                                  ws_target=ws_target,
                                  date=date,
                                  session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(StateError):
            System.do("reschedule_workshop", workshop=new_workshop,
                       wstarget=ws_target, session=nc_session)


 #+END_SRC

* Test UploadArtefact
#+NAME: test_UploadArtefact
#+BEGIN_SRC python
class TestUploadArtefact(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_upload_artefact(self):
        print "test_upload_artefact"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)

        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()

        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()

        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()

        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role, session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        completed_status = Status.get_by_id(3)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()

        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                             oc_target=oc_target, ws_targets=[])
        nc_target.save()

        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                             date=date, nc_target=nc_target)
        ws_target.save()

        pending_approval = Status.get_by_id(4)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_approval, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        file_type = FileType(name="photo")
        file_type.save()

        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                file_type = file_type, workshop = workshop)
        new_artefact.save()
         
        System.do("upload_artefact", workshop = workshop,
                  session = nc_session, artefact=Artefact.get_by_id(1))
        
        self.assertEqual(workshop.get("artefacts")[0].get("name"),
                         new_artefact.get("name"))

        self.assertEqual(workshop.get("status").get("name") ,
                         pending_approval.get("name"))

    def test_upload_artefact_raises_arity_error(self):
        print "test_upload_artefact_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)

        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()

        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()

        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()

        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role, session=session)  

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                             oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                             date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(ArityError):
            System.do("upload_artefact", workshop=new_workshop)

    def test_upload_artefact_raises_type_error(self):
        print "test_upload_artefact_type_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)

        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()

        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()

        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()

        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role, session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()

        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                             oc_target=oc_target, ws_targets=[])
        nc_target.save()

        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                             date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        new_workshop.save()

        file_type = FileType(name="photo")
        file_type.save()

        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                file_type = file_type, workshop = new_workshop)
        new_artefact.save()

        with self.assertRaises(TypeError):
            System.do("upload_artefact", workshop=new_artefact, 
                       artefact=new_workshop, session=nc_session)

    def test_upload_artefact_raises_auth_error(self):
        print "test_upload_artefact_auth_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role, session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        new_workshop.save()
        file_type = FileType(name="photo")
        file_type.save()

        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                file_type = file_type, workshop = new_workshop)
        new_artefact.save()

        with self.assertRaises(TypeError):
            System.do("upload_artefact", workshop=new_workshop, 
                       artefact=new_artefact, session=login_user)

    def test_upload_artefact_raises_state_error_with_wrong_status(self):
        print "test_upload_artefact_raises_state_error_with_wrong_status"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()

        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()

        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()

        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()

        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role = Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,
                   session=session)

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)
        pending_status = Status.get_by_id(2)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()

        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()

        nc_target = NCTarget(usage=400, date=date, nc=nc,
                             oc_target=oc_target, ws_targets=[])
        nc_target.save()

        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                             date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        file_type = FileType(name="photo")
        file_type.save()

        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                file_type = file_type, workshop = new_workshop)
        new_artefact.save()

        with self.assertRaises(StateError):
            System.do("upload_artefact", workshop=new_workshop, 
                       artefact=new_artefact, session=nc_session)

#+END_SRC

* Test ApproveWorkshop
#+NAME: test_ApproveWorkshop
#+BEGIN_SRC python
class TestApproveWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_approve_workshop(self):
        print "test_approve_workshop"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_for_approval_status = Status.get_by_id(4)
        approved_status = Status.get_by_id(6)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        name1=Name(name="ocuser")
        name1.save()

        email1=Email(email="ocuser@gmail.com")
        email1.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role])
        oc_user = System.do("add_user",user = user, session = session)
        occ_role =  Role.get_by_id(5)
        System.do("add_role", user=oc_user, role=occ_role,                            
                   session=session)                                                        

        oc_session = Session(user = oc_user, role = occ_role)
        System.session_set.append(oc_session)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_for_approval_status, 
                            artefacts=[], 
                            ws_target=ws_target,
                            nc=nc,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        System.do("approve_workshop", workshop=workshop,
                   session=oc_session)

        self.assertEqual(workshop.get("status").get("name"),
                         approved_status.get("name"))

    def test_approve_workshop_raises_arity_error(self):
        print "test_approve_workshop_raises_arity_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = System.do("create_workshop", 
                                     name="Test workshop",
                                     institute=inst3,
                                     status=pending_status, 
                                     nc=nc,
                                     ws_target=ws_target,
                                     date=date,
                                     session=nc_session) 
                                     
        new_workshop.save()

        with self.assertRaises(ArityError):
            System.do("approve_workshop", workshop=new_workshop)

    def test_approve_workshop_raises_type_error(self):
        print "test_approve_workshop_raises_type_error"
        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)
        role_check = Role.get_by_id(6)

        pending_status = Status.get_by_id(1)
        
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        new_workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            nc=nc,
                            ws_target=ws_target,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        new_workshop.save()

        with self.assertRaises(TypeError):
            System.do("approve_workshop", workshop=nc_session,
                                         session=new_workshop)


 #+END_SRC

* Test RejectWorkshop
#+NAME: test_RejectWorkshop
#+BEGIN_SRC python
class TestRejectWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_reject_workshop(self):
        print "test_reject_workshop"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_for_approval_status = Status.get_by_id(4)
        rejected_status = Status.get_by_id(5)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        name1=Name(name="ocuser")
        name1.save()

        email1=Email(email="ocuser@gmail.com")
        email1.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role])
        oc_user = System.do("add_user",user = user, session = session)
        occ_role =  Role.get_by_id(5)
        System.do("add_role", user=oc_user, role=occ_role,                            
                   session=session)                                                        

        oc_session = Session(user = oc_user, role = occ_role)
        System.session_set.append(oc_session)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_for_approval_status, 
                            artefacts=[], 
                            ws_target=ws_target,
                            nc=nc,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        System.do("reject_workshop", workshop=workshop,
                   session=oc_session)

        self.assertEqual(workshop.get("status").get("name"),
                         rejected_status.get("name"))

    def test_reject_workshop_raises_arity_error(self):
        print "test_reject_workshop_raises_arity_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_for_approval_status = Status.get_by_id(4)
        rejected_status = Status.get_by_id(5)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        name1=Name(name="ocuser")
        name1.save()

        email1=Email(email="ocuser@gmail.com")
        email1.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role])
        oc_user = System.do("add_user",user = user, session = session)
        occ_role =  Role.get_by_id(5)
        System.do("add_role", user=oc_user, role=occ_role,                            
                   session=session)                                                        

        oc_session = Session(user = oc_user, role = occ_role)
        System.session_set.append(oc_session)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_for_approval_status, 
                            artefacts=[], 
                            ws_target=ws_target,
                            nc=nc,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        with self.assertRaises(ArityError):
            System.do("reject_workshop", workshop=workshop)

    def test_reject_workshop_raises_type_error(self):
        print "test_reject_workshop_raises_type_error"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_for_approval_status = Status.get_by_id(4)
        rejected_status = Status.get_by_id(5)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        name1=Name(name="ocuser")
        name1.save()

        email1=Email(email="ocuser@gmail.com")
        email1.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role])
        oc_user = System.do("add_user",user = user, session = session)
        occ_role =  Role.get_by_id(5)
        System.do("add_role", user=oc_user, role=occ_role,                            
                   session=session)                                                        

        oc_session = Session(user = oc_user, role = occ_role)
        System.session_set.append(oc_session)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_for_approval_status, 
                            artefacts=[], 
                            ws_target=ws_target,
                            nc=nc,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        with self.assertRaises(TypeError):
            System.do("reject_workshop", workshop=oc_session,
                          session=workshop)

    def test_reject_workshop_raises_state_error_with_wrong_status(self):
        print "test_reject_workshop_raises_state_error_with_wrong_status"

        login_user = User.get_by_id(1)
        login_role = Role.get_by_id(1)
        session = System.do("login", user=login_user, role=login_role)
        inst1 = Institute(name="NIT", address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT", address="Hyderabad")
        inst2.save()
        inst3 = Institute(name="HCU", address="Hyderabad")
        inst3.save()
        oc = System.do("add_oc", institute=inst1,
                        session=session)
        nc = System.do("add_nc", institute=inst2,
                        hub=oc, session=session)

        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(2), email=Email.get_by_id(2),
                    roles=[guest_role])

        nc_user = System.do("add_user", user=user, session=session)
        ncc_role =  Role.get_by_id(6)
        System.do("add_role", user=nc_user, role=ncc_role,                            
                   session=session)                                                        

        nc_session = Session(user=nc_user, role=ncc_role)
        System.session_set.append(nc_session)

        pending_status = Status.get_by_id(1)
        rejected_status = Status.get_by_id(5)
        date = datetime.datetime.strptime("2016-12-23", "%Y-%m-%d").date()
        
        oc_target = OCTarget(usage=400, date=date, oc=oc, nc_targets=[])
        oc_target.save()
        nc_target = NCTarget(usage=400, date=date, nc=nc, 
                                 oc_target=oc_target, ws_targets=[])
        nc_target.save()
        ws_target = WSTarget(usage=4000, participants=200, experiments=20,
                                 date=date, nc_target=nc_target)
        ws_target.save()

        name1=Name(name="ocuser")
        name1.save()

        email1=Email(email="ocuser@gmail.com")
        email1.save()
        guest_role = Role.get_by_id(2)
        user = User(name=Name.get_by_id(3), email= Email.get_by_id(3),
                    roles= [guest_role])
        oc_user = System.do("add_user",user = user, session = session)
        occ_role =  Role.get_by_id(5)
        System.do("add_role", user=oc_user, role=occ_role,                            
                   session=session)                                                        

        oc_session = Session(user = oc_user, role = occ_role)
        System.session_set.append(oc_session)

        workshop = Workshop(name="Test workshop",
                            institute=inst3,
                            status=pending_status, 
                            artefacts=[], 
                            ws_target=ws_target,
                            nc=nc,
                            date=date,
                            participants=0,
                            experiments=0,
                            usage=0)
        workshop.save()

        with self.assertRaises(StateError):
            System.do("reject_workshop", workshop=workshop,
                          session=oc_session)

    #+END_SRC

* Test DeleteArtefact
#+NAME: test_DeleteArtefact
#+BEGIN_SRC python
class TestDeleteArtefact(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        populate_db()

    def tearDown(self):
        System.session_set = []
        db.session.remove()
        db.drop_all()

    def test_delete_artefact(self):
        print "test_delete_artefact"
        admin_user=User.get_by_id(1)
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        inst = Institute(name = "IIIT", address = "Hyderabad")
        institute = System.do("add_institute", institute = inst, session=session)
        inst = Institute(name = "NITK", address = "Surathkal")
        workshop_institute = System.do("add_institute", institute = inst, 
                                        session = session)
            
        oc = System.do("add_oc",institute=institute,spokes=[],
                       session=session, oc_target = None)
        
        nc = System.do("add_nc",institute=institute,hub=oc,session=session,
                        nc_target = None, workshops = [])
        
        name=Name(name="ncuser")
        email=Email(email="ncuser@gmail.com")
        name.save()
        email.save()
        guest_role = Role.query.filter_by(name='guest').first()
        user = User(name=Name.get_by_id(2), email= Email.get_by_id(2),
                    roles= [guest_role],
                    user_status="active")
        nc_user = System.do("add_user",user = user, session = session)
        ncc_role =  Role.get_by_id(6)
        if ncc_role:
            nc_user.append_role(ncc_role)

        nc_session = Session(user = nc_user, role = ncc_role)
        System.session_set.append(nc_session)


        target_date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        oc_target.save()   
        nc_target = NCTarget(usage = 200, date = target_date,
                             oc_target = oc_target, wstargets = [])
        nc_target.save()   
        wstarget = WSTarget(usage = 4000, participants = 200, experiments = 20,
                            date = target_date, nc_target = nc_target)
        wstarget.save()

        ws_status = Status(name = "pending")
        ws_status.save()

        workshop_name = Name(name = "Lab Workshop")
        workshop_name.save()


        new_workshop = System.do("create_workshop",
                                 institute = Institute.get_by_id(2),
                                 name  = workshop_name, ws_target = wstarget,
                                 status = ws_status, artefacts = [],
                                 nc = nc, session = nc_session) 
          

        System.do("conduct_workshop", workshop = new_workshop,
                  session = nc_session)
 
        new_artefact = Artefact(name = "Photo", 
                                path = "/main/photos", 
                                a_type = Type.photo)
        new_artefact.save()

        System.do("upload_artefact", workshop = new_workshop,
                  session = nc_session, artefact = Artefact.get_by_id(1))
        
        System.do("delete_artefact", workshop = new_workshop,
                  session = nc_session, artefact = new_artefact)

        self.assertEqual(len(new_workshop.get("artefacts")), 0)
        self.assertEqual(new_workshop.get("status").get("name"),
                         Status.pending_approval.get("name"))
        

    #+END_SRC

* ops_table
#+NAME: ops_table
#+BEGIN_SRC python
ops_table = {'add_user' : AddUser, 
             'login': login, 
             'logout': logout,
             'add_institute': AddInstitute, 
             'delete_user': DeleteUser,
             'add_oc': AddOC, 
             'add_nc': AddNC, 
             'update_user': UpdateUser, 
             'update_institute': UpdateInstitute, 
             'add_role': AddRole,
             'create_workshop' : CreateWorkshop,
             'cancel_workshop' : CancelWorkshop,
             'reschedule_workshop' : RescheduleWorkshop, 
             'conduct_workshop' : ConductWorkshop,
             'upload_artefact' : UploadArtefact,
             'approve_workshop' : ApproveWorkshop,
             'reject_workshop' : RejectWorkshop,
             'delete_artefact' : DeleteArtefact
}
#+END_SRC

* Infra                                                         :boilerplate:

** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
#from runtime.utils.class_persistence_template import *
from runtime.rest.app import create_app
#from sqlalchemy.exc import IntegrityError
from runtime.system.persistent_delegates import *

from runtime.system.system import *
from runtime.system.populate_db import *
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangling                                                      :boilerplate:

** source
#+BEGIN_SRC python :tangle populate_db.py :eval no :noweb yes
<<populate_db>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_persistent_system.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
#<<test_persistent_system_constructor>>
#<<test_arity_and_types>>
<<test_add_user>>
#<<test_update_user>>
#<<test_update_user>>
<<test_login>>
<<test_logout>>
#<<test_updateuser>>
<<test_AddInstitute>>
<<test_AddOC>>
<<test_AddNC>>
<<test_AddRole>>
#<<test_UpdateInstitute>>
<<test_CreateWorkshop>>
<<test_CancelWorkshop>>
<<test_RescheduleWorkshop>>
<<test_ConductWorkshop>>
<<test_UploadArtefact>>
<<test_ApproveWorkshop>>
<<test_RejectWorkshop>>
#<<test_DeleteArtefact>>
<<run_test_cases>>
#+end_src
