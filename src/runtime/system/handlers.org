#+TITLE: Object Handler for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Object Handler
  Object Handler encapsulates a set of functions where each function performs a
  specific task.  With the use of these handlers, the core implementation of
  the =system= will not alter but by plugging handlers that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.

** Initialize Object Handler
   Provides all the handlers that operate on objects.

*** class_object_handler 
#+NAME: class_object_handler
#+BEGIN_SRC python
class ObjectHandler():
   
    def __init__(self):
        role_set = []
        user_set = []
        self.active_user_set=[]
        self.institute_set = []
        self.oc_set = []
        self.nc_set = []
        self.workshop_set = []

        self.role_set = self.initialize_role_set()
        self.user_set = self.initialize_user_set()

#+END_SRC

*** initialize_role_set
#+NAME: initialize_object_role_set
#+begin_src python
    def initialize_role_set(self):
        Role_admin = Role(name="admin", centre_oc=None, centre_nc=None)
        Role_guest = Role(name="guest", centre_oc=None, centre_nc=None)
        Role_noc = Role(name="noc", centre_oc=None, centre_nc=None)
        Role_reviewer = Role(name="reviewer", centre_oc=None, centre_nc=None)                
        self.role_set = [Role.admin, Role.guest, Role.noc, Role.reviewer]
        return self.role_set

#+end_src

*** initialize_user_set
#+NAME: initialize_object_user_set
#+begin_src python

    def initialize_user_set(self):

        admin_user = User(name=Name(name=Config.admin_name),
                          email=Email(email=Config.admin_email),
                          roles=[Role.admin, Role.guest], user_status="active")
        self.user_set = [admin_user]
        return self.user_set

#+end_src

*** Tests
#+NAME: test_initialize_object_handler
#+BEGIN_SRC python
class TestObjectHandler(TestCase):
    TESTING = True
    object_handler = None
    
    def setUp(self):
        self.obj_handler = ObjectHandler()
    
    def tearDown(self):
        self.obj_handler = None
   
    def test_initialize_object_handler(self):
         print "test_initialize_object_handler"
         self.assertEqual(len(self.obj_handler.role_set), 4)
         self.assertEqual(self.obj_handler.role_set[0].get("name"), "admin")
         self.assertEqual(len(self.obj_handler.user_set), 1)
         self.assertEqual(self.obj_handler.user_set[0].get("roles")[0].get("name"),
                          "admin")
         self.assertEqual(self.obj_handler.user_set[0].get("roles")[1].get("name"),
                          "guest")

#+END_SRC


** Other functions
   Other functions that help =System= perform the operations. 

*** user_exists
    Check if =user= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: user_exists
#+BEGIN_SRC python
    def user_exists(self, user):
        active_users = self.get_active_users()
        if user in active_users:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_user_exists
#+BEGIN_SRC python
    def test_user_exists(self):
         print "test_user_exists"
         user = self.obj_handler.user_set[0]
         self.assertEqual(self.obj_handler.user_exists(user), True)

#+END_SRC


*** add_user
    Add a user to the system
    This function adds a user to the user-set maintained by the system.
#+NAME: add_user
#+BEGIN_SRC python
    def add_user(self, user):
        self.user_set.append(user)
        return user

#+END_SRC

**** Tests
#+NAME: test_add_user
#+BEGIN_SRC python
    def test_add_user(self):
         print "test_add_user"
         user = User(name=Name(name="some user"),
                          email=Email(email="tt@kk.com"),
                          roles=[Role.admin], user_status="active")

         user = self.obj_handler.add_user(user)
         self.assertEqual(self.obj_handler.user_exists(user), True)

#+END_SRC


*** role_exists
    Check if =role= already exists
    This function checks if a user is already in the role-set of the =System=.
#+NAME: role_exists
#+BEGIN_SRC python
    def role_exists(self, role):
        if role in self.role_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_role_exists
#+BEGIN_SRC python
    def test_role_exists(self):
         print "test_role_exists"
         role = self.obj_handler.role_set[0]
         self.assertEqual(self.obj_handler.role_exists(role), True)

#+END_SRC


*** add_role
    Add a role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: add_role
#+BEGIN_SRC python
    def add_role(self, role):
        self.role_set.append(role)
        return role

#+END_SRC

**** Tests
#+NAME: test_add_role
#+BEGIN_SRC python
    def test_add_role(self):
         print "test_add_role"
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = self.obj_handler.add_role(role)
         self.assertEqual(self.obj_handler.role_exists(role), True)

#+END_SRC



*** institute_exists
    Check if =institute= already exists
    This function checks if a user is already in the institute-set of the =System=.
#+NAME: institute_exists
#+BEGIN_SRC python
    def institute_exists(self, institute):
        if institute in self.institute_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_institute_exists
#+BEGIN_SRC python
    def test_institute_exists(self):
         print "test_institute_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.obj_handler.add_institute(ins)
         self.assertEqual(self.obj_handler.institute_exists(inst), True)

#+END_SRC


*** add_institute
    Add an institute to the system
    This function adds an institute to the institute-set maintained by the system.
#+NAME: add_institute
#+BEGIN_SRC python
    def add_institute(self, institute):
        self.institute_set.append(institute)
        return institute

#+END_SRC

**** Tests
#+NAME: test_add_institute
#+BEGIN_SRC python
    def test_add_institute(self):
         print "test_add_institute"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.obj_handler.add_institute(ins)
         self.assertEqual(self.obj_handler.institute_exists(inst), True)

#+END_SRC



*** oc_exists
    Check if =oc= already exists
    This function checks if an outreach-centre is already in the oc-set of the =System=.
#+NAME: oc_exists
#+BEGIN_SRC python
    def oc_exists(self, oc):
        if oc in self.oc_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_oc_exists
#+BEGIN_SRC python
    def test_oc_exists(self):
         print "test_oc_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         oc1 = OC(institute=Institute(name="IIITH",address="Hyderabad"),spokes=[], oc_target = None)
         oc = self.obj_handler.add_oc(oc1)
         self.assertEqual(self.obj_handler.oc_exists(oc), True)
#+END_SRC


*** add_oc
    Add a oc to the system
    This function adds an outreach centre to the oc-set maintained by the system.
#+NAME: add_oc
#+BEGIN_SRC python
    def add_oc(self, oc):
        self.oc_set.append(oc)
        return oc

#+END_SRC

**** Tests
#+NAME: test_add_oc
#+BEGIN_SRC python
    def test_add_oc(self):
         print "test_add_oc"
         ins = Institute(name='IIIT',address='Hyderabad')
         oc1 = OC(institute=Institute(name="IIITH",address="Hyderabad"),spokes=[], oc_target = None)
         oc = self.obj_handler.add_oc(oc1)
         self.assertEqual(self.obj_handler.oc_exists(oc), True)

#+END_SRC



*** nc_exists
    Check if =nc= already exists
    This function checks if a nodal-centre is already in the nc-set of the =System=.
#+NAME: nc_exists
#+BEGIN_SRC python
    def nc_exists(self, nc):
        if nc in self.nc_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_nc_exists
#+BEGIN_SRC python
    def test_nc_exists(self):
         print "test_nc_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
         nc1 = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
         nc = self.obj_handler.add_nc(nc1)
         self.assertEqual(self.obj_handler.nc_exists(nc), True)

#+END_SRC


*** add_nc
    Add a nc to the system
    This function adds a nodal centre to the nc-set maintained by the system.
#+NAME: add_nc
#+BEGIN_SRC python
    def add_nc(self, nc):
        self.nc_set.append(nc)
        return nc

#+END_SRC

**** Tests
#+NAME: test_add_nc
#+BEGIN_SRC python
    def test_add_nc(self):
         print "test_add_nc"
         ins = Institute(name='IIIT',address='Hyderabad')
         oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
         nc1 = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
         nc = self.obj_handler.add_nc(nc1)
         self.assertEqual(self.obj_handler.nc_exists(nc), True)

#+END_SRC



*** get_active_users
    This function returns All the active users from the user_set.
#+NAME: get_active_users
#+BEGIN_SRC python
    def get_active_users(self): 
        active_user_set = filter(lambda x: x.get("user_status")=="active",
                                self.user_set)
        return active_user_set
#+END_SRC
**** Tests
#+NAME: test_get_active_users
#+BEGIN_SRC python
    def test_get_active_users(self):
         print "test_get_active_users"
         user = User(name=Name(name="some user"),
                          email=Email(email="tt@kk.com"),
                          roles=[Role.admin], user_status="active")

         self.obj_handler.add_user(user)
         active_user_list = self.obj_handler.get_active_users()
         self.assertEqual(len(active_user_list), 2)

#+END_SRC


*** workshop_exists
    Check if =workshop= already exists
    This function checks if a workshop is already in the workshop-set of the =System=.
#+NAME: workshop_exists
#+BEGIN_SRC python
    def workshop_exists(self, workshop):
        if workshop in self.workshop_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_workshop_exists
#+BEGIN_SRC python
    def test_workshop_exists(self):
        print "test_workshop_exists"
        ins = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc1 = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        wstarget = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        workshop_name = Name(name = "New Workshop")
        ws_status = Status(name = "pending")
        workshop = Workshop(institute = ins, 
                            nc = nc1, 
                            artefacts = [], 
                            ws_target = wstarget, 
                            status = ws_status, 
                            name = workshop_name, 
                            a_date = None,
                            a_participants = 0,
                            a_experiments = 0,
                            a_usage = 0)
        workshop = self.obj_handler.add_workshop(workshop)
        self.assertEqual(self.obj_handler.workshop_exists(workshop), True)

#+END_SRC

*** add_workshop
    Add a workshop to the system
    This function adds a workshop to the workshop-set maintained by the system.
#+NAME: add_workshop
#+BEGIN_SRC python
    def add_workshop(self, workshop):
        self.workshop_set.append(workshop)
        return workshop

#+END_SRC

**** Tests
#+NAME: test_add_workshop
#+BEGIN_SRC python
    def test_add_workshop(self):
        print "test_add_workshop"
        ins = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc1 = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        wstarget = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        workshop_name = Name(name = "New Workshop")
        ws_status = Status(name = "pending")
        workshop = Workshop(institute = ins, 
                            nc = nc1, 
                            artefacts = [], 
                            ws_target = wstarget, 
                            status = ws_status, 
                            name = workshop_name, 
                            a_date = None,
                            a_participants = 0,
                            a_experiments = 0,
                            a_usage = 0)
        workshop = self.obj_handler.add_workshop(workshop)
        self.assertEqual(self.obj_handler.workshop_exists(workshop), True)

#+END_SRC


* Persistence Handler
  Persistence Handler encapsulates a set of functions where each function performs a
  specific task.  With the use of these handlers, the core implementation of
  the =system= will not alter but by plugging handlers that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.

** Initialize Persistence Handler
   Provides all the handlers that operate on objects.

*** class_persistence_handler 
#+NAME: class_persistence_handler
#+BEGIN_SRC python
class PersistenceHandler():
   
    def __init__(self):
        #self.initialize_role_set()
        #self.initialize_user_set()
        pass

#+END_SRC

*** initialize_role_set
#+NAME: initialize_persistent_role_set
#+begin_src python
    def initialize_role_set(self):
        self.admin_role = Role(name="admin", centre_oc=None, centre_nc=None)
        self.guest_role = Role(name="guest", centre_oc=None, centre_nc=None)
        self.noc_role = Role(name="noc", centre_oc=None, centre_nc=None)
        self.reviewer_role = Role(name="reviewer", centre_oc=None, centre_nc=None)
        self.admin_role.save()
        self.guest_role.save()
        self.reviewer_role.save()
        self.noc_role.save()
        return Role.query.all()


#+end_src

*** initialize_user_set
#+NAME: initialize_persistent_user_set
#+begin_src python

    def initialize_user_set(self):
        admin_name = Name(name=Config.admin_name)
        admin_email = Email(email=Config.admin_email)
        admin_name.save()
        admin_email.save()
        role_admin = Role.get_by_id(1)
        role_guest = Role.get_by_id(2)
        self.admin_user = User(name=admin_name,
                          email=admin_email,
                          roles=[role_admin, role_guest], user_status="active")
        self.admin_user.save()
        return User.query.all()
#+end_src

*** Tests
#+NAME: test_initialize_persistent_handler
#+BEGIN_SRC python
class TestPersistentHandler(TestCase):
    TESTING = True
    object_handler = None
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        #self.persistent_handler = PersistenceHandler()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        #self.persistent_handler = None

    def test_initialize_object_handler(self):
         print "test_initialize_persistent_handler"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         self.assertEqual(len(Role.get_all()), 4)
         self.assertEqual(Role.get_by_id(1).get("name"), "admin")
         self.assertEqual(len(User.query.all()), 1)
         self.assertEqual(User.get_by_id(1).get("roles")[0].get("name"),
                          "admin")
         self.assertEqual(User.get_by_id(1).get("roles")[1].get("name"),
                         "guest")

#+END_SRC


** Other functions
   Other functions that help =System= perform the operations. 

*** user_exists
    Check if =user= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistent_user_exists
#+BEGIN_SRC python
    def user_exists(self, user):
        active_users = User.query.filter_by(user_status='active')
        if user in active_users:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_user_exists
#+BEGIN_SRC python
    def test_user_exists(self):
         print "test_user_exists"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         user = User.get_by_id(1)
         self.assertEqual(handler.user_exists(user), True)

#+END_SRC

*** add_user
    Add a user to the system
    This function adds a user to the user-set maintained by the system.
#+NAME: add_persistent_user
#+BEGIN_SRC python
    def add_user(self, user):
        user.save()
        return user

#+END_SRC

**** Tests
#+NAME: test_add_persistent_user
#+BEGIN_SRC python
    def test_add_user(self):
         print "test_add_user"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         name = Name(name="some user")
         name.save()
         email = Email(email="tt@kk.com")
         email.save()
         user = User(name=name,
                     email=email,
                     roles=[Role.get_by_id(1)], user_status="active")
         user = handler.add_user(user)
         self.assertEqual(handler.user_exists(user), True)

#+END_SRC

*** oc_exists
    Check if =oc= already exists
    This function checks if an outreach-centre is already in the oc-set of the =System=.
#+NAME: persistent_oc_exists
#+BEGIN_SRC python
    def oc_exists(self, oc):
        self.oc_list = OC.get_all()
        if oc in self.oc_list:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_oc_exists
#+BEGIN_SRC python
    def test_oc_exists(self):
         print "test_oc_exists"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         oc1 = OC(institute=ins.get_by_id(1), spokes=[], oc_target = None)
         oc1.save()
#         oc = handler.add_oc(oc1)
         self.assertEqual(handler.oc_exists(oc1), True)
#+END_SRC

*** add_oc
    Add a oc to the system
    This function adds an outreach centre to the oc-set maintained by the system.
#+NAME: persistent_add_oc
#+BEGIN_SRC python
    def add_oc(self, oc):
        oc.save()
        return oc
#+END_SRC

**** Tests
#+NAME: test_persistent_add_oc
#+BEGIN_SRC python
    def test_add_oc(self):
         print "test_persistent_add_oc"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()

         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         oc1 = OC(institute=ins.get_by_id(1),spokes=[], oc_target = None)
         oc1.save()
         oc = handler.add_oc(oc1)
         self.assertEqual(handler.oc_exists(oc), True)

#+END_SRC

*** nc_exists
    Check if =nc= already exists
    This function checks if a nodal-centre is already in the nc-set of the =System=.
#+NAME: persistent_nc_exists
#+BEGIN_SRC python
    def nc_exists(self, nc):
        self.nc_list = NC.get_all()
        if nc in self.nc_list:
            return True
        else:
            return False
#+END_SRC

**** Tests
#+NAME: test_persistent_nc_exists
#+BEGIN_SRC python
    def test_nc_exists(self):
         print "test_persistent_nc_exists"

         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()

         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         oc = OC(institute=ins, spokes=[], oc_target = None)
         oc.save()

         nc1 = NC(institute=ins, hub=oc, nc_target = None, workshops=None)
         print nc1   
         nc1.save()
#         nc = self.obj_handler.add_nc(nc)
         self.assertEqual(handler.nc_exists(nc1), True)

#+END_SRC

*** add_nc
    Add a nc to the system
    This function adds a nodal centre to the nc-set maintained by the system.
#+NAME: persistent_add_nc
#+BEGIN_SRC python
    def add_nc(self, nc):
        print "asdf"    
        nc.save() 
        return nc

#+END_SRC

**** Tests
#+NAME: test_persistent_add_nc
#+BEGIN_SRC python
    def test_add_nc(self):
         print "test_add_nc"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()

         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         oc = OC(institute=ins, spokes=[], oc_target = None)
         oc.save()   
         nc1 = NC(institute=ins, hub=oc, nc_target = None, workshops=None)
         print nc1
         #nc1.save() 
         nc = handler.add_nc(nc1)
         print "after adding"
         print nc
         self.assertEqual(handler.nc_exists(nc), True)

#+END_SRC

*** add_workshop
    Add a workshop to the system
    This function adds a workshop to the workshop-set maintained by the system.
#+NAME: persistent_add_workshop
#+BEGIN_SRC python
    def add_workshop(self, workshop):
        workshop.save()
        return workshop

#+END_SRC

**** Tests
#+NAME: test_persistent_add_workshop
#+BEGIN_SRC python
    def test_add_workshop(self):
        print "test_add_workshop"
        handler = PersistenceHandler()
        handler.initialize_role_set()
        handler.initialize_user_set()

        ins = Institute(name='IIIT',address='Hyderabad')
        ins.save()
        oc = OC(institute=ins.get_by_id(1), spokes=[], oc_target = None)
        oc.save()
        nc1 = NC(institute=ins.get_by_id(1), hub=oc, nc_target = None, workshops=None)
        nc1.save()
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        oc_target.save()
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        nc_target.save()
        wstarget = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        wstarget.save()
        workshop_name = Name(name = "New Workshop")
        ws_status = Status(name = "pending")
        workshop = Workshop(institute = ins, nc = nc1, artefacts = [], ws_target = wstarget, status = ws_status, name = workshop_name)
        workshop.save()
        workshop = handler.add_workshop(workshop)
        self.assertEqual(handler.workshop_exists(workshop), True)

#+END_SRC

*** workshop_exists
    Check if =workshop= already exists
    This function checks if a workshop is already in the workshop-list of the =System=.
#+NAME: persistent_workshop_exists
#+BEGIN_SRC python
    def workshop_exists(self, workshop):
        workshop_list = Workshop.get_all()
        if workshop in self.workshop_list:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_workshop_exists
#+BEGIN_SRC python
    def test_workshop_exists(self):
        print "test_workshop_exists"
        handler = PersistenceHandler()
        handler.initialize_role_set()
        handler.initialize_user_set()

        ins = Institute(name='IIIT',address='Hyderabad')
        ins.save()
        oc = OC(institute=ins, spokes=[], oc_target = None)
        oc.save()   
        nc1 = NC(institute=ins, hub=oc, nc_target = None, workshops=None)
        nc1.save() 
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        oc_target.save()
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        nc_target.save()
        wstarget = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        wstarget.save() 
        workshop_name = Name(name = "New Workshop")
        workshop_name.save()
        ws_status = Status(name = "pending")
        ws_status.save()
        workshop = Workshop(institute = ins, 
                            nc = nc1, 
                            artefacts = [], 
                            ws_target = wstarget, 
                            status = ws_status, 
                            name = workshop_name, 
                            a_date = None,
                            a_participants = 0,
                            a_experiments = 0,
                            a_usage = 0)
        workshop.save()
        workshop = handler.add_workshop(workshop)
        self.assertEqual(handler.workshop_exists(workshop), True)

#+END_SRC

*** role_exists
    Check if =role= already exists
    This function checks if a user is already in the role-set of the =System=.
#+NAME: persistent_role_exists
#+BEGIN_SRC python
    def role_exists(self, role):
        if role in Role.get_all():
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_role_exists
#+BEGIN_SRC python
    def test_role_exists(self):
         print "test_role_exists"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         role = Role.get_by_id(1)
         self.assertEqual(handler.role_exists(role), True)

#+END_SRC


*** add_role
    Add a role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: add_persistent_role
#+BEGIN_SRC python
    def add_role(self, role):
        role.save()
        return role

#+END_SRC

**** Tests
#+NAME: test_add_persistent_role
#+BEGIN_SRC python
    def test_add_role(self):
         print "test_add_role"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = handler.add_role(role)
         self.assertEqual(handler.role_exists(role), True)

#+END_SRC




*** institute_exists
    Check if =institute= already exists
    This function checks if a user is already in the institute-set of the =System=.
#+NAME: persistent_institute_exists
#+BEGIN_SRC python
    def institute_exists(self, institute):
        if institute in Institute.get_all():
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_institute_exists
#+BEGIN_SRC python
    def test_institute_exists(self):
         print "test_institute_exists"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = handler.add_institute(ins)
         self.assertEqual(handler.institute_exists(inst), True)

#+END_SRC


*** add_institute
    Add an institute to the system
    This function adds an institute to the institute-set maintained by the system.
#+NAME: add_persistent_institute
#+BEGIN_SRC python
    def add_institute(self, institute):
        institute.save()
        return institute

#+END_SRC

**** Tests
#+NAME: test_add_persistent_institute
#+BEGIN_SRC python
    def test_add_institute(self):
         print "test_add_institute"
         handler = PersistenceHandler()
         handler.initialize_role_set()
         handler.initialize_user_set()
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = handler.add_institute(ins)
         self.assertEqual(handler.institute_exists(inst), True)

#+END_SRC




* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_object_handlers
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.config.config import Config
from runtime.exceptions.custom_exceptions import *
import datetime
#+end_src

#+name: imports_for_persistent_handlers
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.config.config import Config
#from runtime.exceptions.custom_exceptions import *
#+end_src

** Tests
*** Imports 
#+name: imports_for_tests_object
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from object_handlers import *
import datetime
#+end_src

#+name: imports_for_tests_persistence
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from persistent_handlers import *


config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle object_handlers.py :eval no :noweb yes
<<imports_for_object_handlers>>
<<class_object_handler>>
<<initialize_object_role_set>>
<<initialize_object_user_set>>
<<user_exists>>
<<add_user>>
<<role_exists>>
<<add_role>>
<<institute_exists>>
<<add_institute>>
<<oc_exists>>
<<add_oc>>
<<nc_exists>>
<<add_nc>>
<<workshop_exists>>
<<add_workshop>>
<<get_active_users>>

#+end_src


#+BEGIN_SRC python :tangle persistent_handlers.py :eval no :noweb yes
<<imports_for_persistent_handlers>>
<<class_persistence_handler>>
<<initialize_persistent_role_set>>
<<initialize_persistent_user_set>>
<<persistent_user_exists>>
<<add_persistent_user>>
<<persistent_oc_exists>>
<<persistent_nc_exists>>
<<persistent_add_oc>>
<<persistent_add_nc>>
<<persistent_add_workshop>>
<<persistent_workshop_exists>>
<<persistent_role_exists>>
<<add_persistent_role>>
<<persistent_institute_exists>>
<<add_persistent_institute>>
#+end_src
** tests
#+BEGIN_SRC python :tangle test_object_handlers.py :eval no :noweb yes
<<imports_for_tests_object>>
<<test_initialize_object_handler>>
<<test_user_exists>>
<<test_add_user>>
<<test_role_exists>>
<<test_add_role>>
<<test_institute_exists>>
<<test_add_institute>>
<<test_oc_exists>>
<<test_add_oc>>
<<test_nc_exists>>
<<test_add_nc>>
<<test_get_active_users>>
<<test_workshop_exists>>
<<test_add_workshop>>

<<run_test_cases>>
#+end_src

#+BEGIN_SRC python :tangle test_persistent_handlers.py :eval no :noweb yes
<<imports_for_tests_persistence>>
<<test_initialize_persistent_handler>>
<<test_persistent_user_exists>>
<<test_add_persistent_user>>
<<test_persistent_add_oc>>
<<test_persistent_oc_exists>>
<<test_persistent_add_nc>>
<<test_persistent_nc_exists>>
<<test_persistent_add_workshop>>
<<test_persistent_workshop_exists>>
<<test_persistent_role_exists>>
<<test_add_persistent_role>>
<<test_persistent_institute_exists>>
<<test_add_persistent_institute>>
<<run_test_cases>>
#+end_src


