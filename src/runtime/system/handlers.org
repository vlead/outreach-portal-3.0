#+TITLE: Object Handler for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Object Handler
  Object Handler encapsulates a set of functions where each function performs a
  specific task.  With the use of these handlers, the core implementation of
  the =system= will not alter but by plugging handlers that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.

** Initialize Object Handler
   Provides all the handlers that operate on objects.

*** class_object_handler 
#+NAME: class_object_handler
#+BEGIN_SRC python
class ObjectHandler():
    role_set = []
    user_set = []
    active_user_set=[]
    institute_set = []
    oc_set = []
    nc_set = []
    workshop_set = []
   
    def __init__(self):
        self.role_set = self.initialize_role_set()
        self.user_set = self.initialize_user_set()

#+END_SRC

*** initialize_role_set
#+NAME: initialize_role_set
#+begin_src python
    def initialize_role_set(self):
        Role_admin = Role(name="admin", centre_oc=None, centre_nc=None)
        Role_guest = Role(name="guest", centre_oc=None, centre_nc=None)
        Role_noc = Role(name="noc", centre_oc=None, centre_nc=None)
        Role_reviewer = Role(name="reviewer", centre_oc=None, centre_nc=None)                
        self.role_set = [Role.admin, Role.guest, Role.noc, Role.reviewer]
        return self.role_set

#+end_src


*** initialize_user_set
#+NAME: initialize_user_set
#+begin_src python

    def initialize_user_set(self):

        admin_user = User(name=Name(name=Config.admin_name),
                          email=Email(email=Config.admin_email),
                          roles=[Role.admin, Role.guest], user_status="active")
        self.user_set = [admin_user]
        return self.user_set

#+end_src


*** Tests
#+NAME: test_initialize_object_handler
#+BEGIN_SRC python
class TestObjectHandler(TestCase):
    TESTING = True
    object_handler = None
    
    def setUp(self):
        self.obj_handler = ObjectHandler()
    
    def tearDown(self):
        self.obj_handler = None
   
    def test_initialize_object_handler(self):
         print "test_initialize_object_handler"
         self.assertEqual(len(self.obj_handler.role_set), 4)
         self.assertEqual(self.obj_handler.role_set[0].get("name"), "admin")
         self.assertEqual(len(self.obj_handler.user_set), 1)
         self.assertEqual(self.obj_handler.user_set[0].get("roles")[0].get("name"),
                          "admin")
         self.assertEqual(self.obj_handler.user_set[0].get("roles")[1].get("name"),
                          "guest")

#+END_SRC


** Other functions
   Other functions that help =System= perform the operations. 

*** user_exists
    Check if =user= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: user_exists
#+BEGIN_SRC python
    def user_exists(self, user):
        if user in self.user_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_user_exists
#+BEGIN_SRC python
    def test_user_exists(self):
         print "test_user_exists"
         user = self.obj_handler.user_set[0]
         self.assertEqual(self.obj_handler.user_exists(user), True)

#+END_SRC


*** add_user
    Add a user to the system
    This function adds a user to the user-set maintained by the system.
#+NAME: add_user
#+BEGIN_SRC python
    def add_user(self, user):
        self.user_set.append(user)
        return user

#+END_SRC

**** Tests
#+NAME: test_add_user
#+BEGIN_SRC python
    def test_add_user(self):
         print "test_add_user"
         user = User(name=Name(name="some user"),
                          email=Email(email="tt@kk.com"),
                          roles=[Role.admin], user_status="active")

         user = self.obj_handler.add_user(user)
         self.assertEqual(self.obj_handler.user_exists(user), True)

#+END_SRC


*** role_exists
    Check if =role= already exists
    This function checks if a user is already in the role-set of the =System=.
#+NAME: role_exists
#+BEGIN_SRC python
    def role_exists(self, role):
        if role in self.role_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_role_exists
#+BEGIN_SRC python
    def test_role_exists(self):
         print "test_role_exists"
         role = self.obj_handler.role_set[0]
         self.assertEqual(self.obj_handler.role_exists(role), True)

#+END_SRC


*** add_role
    Add a role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: add_role
#+BEGIN_SRC python
    def add_role(self, role):
        self.role_set.append(role)
        return role

#+END_SRC

**** Tests
#+NAME: test_add_role
#+BEGIN_SRC python
    def test_add_role(self):
         print "test_add_role"
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = self.obj_handler.add_role(role)
         self.assertEqual(self.obj_handler.role_exists(role), True)

#+END_SRC



*** institute_exists
    Check if =institute= already exists
    This function checks if a user is already in the institute-set of the =System=.
#+NAME: institute_exists
#+BEGIN_SRC python
    def institute_exists(self, institute):
        if institute in self.institute_set:
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_institute_exists
#+BEGIN_SRC python
    def test_institute_exists(self):
         print "test_institute_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.obj_handler.add_institute(ins)
         self.assertEqual(self.obj_handler.institute_exists(inst), True)

#+END_SRC


*** add_role
    Add an institute to the system
    This function adds an institute to the institute-set maintained by the system.
#+NAME: add_institute
#+BEGIN_SRC python
    def add_institute(self, institute):
        self.institute_set.append(institute)
        return institute

#+END_SRC

**** Tests
#+NAME: test_add_institute
#+BEGIN_SRC python
    def test_add_institute(self):
         print "test_add_institute"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.obj_handler.add_institute(ins)
         self.assertEqual(self.obj_handler.institute_exists(inst), True)

#+END_SRC



* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.config.config import Config
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from handlers import *

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle handlers.py :eval no :noweb yes
<<imports_for_sources>>
<<class_object_handler>>
<<initialize_role_set>>
<<initialize_user_set>>
<<user_exists>>
<<add_user>>
<<role_exists>>
<<add_role>>
<<institute_exists>>
<<add_institute>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_handlers.py :eval no :noweb yes
<<imports_for_tests>>
<<test_initialize_object_handler>>
<<test_user_exists>>
<<test_add_user>>
<<test_role_exists>>
<<test_add_role>>
<<test_institute_exists>>
<<test_add_institute>>
<<run_test_cases>>
#+end_src


