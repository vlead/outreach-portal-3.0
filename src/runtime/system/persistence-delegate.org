#+TITLE: Persistence Delegate for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Persistence Delegate
  Persistence Delegate encapsulates a set of functions where each function performs a
  specific task.  With the use of these delegates, the core implementation of
  the =system= will not alter but by plugging delegates that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.

** Initialize Persistence Delegate
   Provides all the delegates that operate on objects.

*** class_persistence_delegate 
#+NAME: class_persistence_delegate
#+BEGIN_SRC python
class PersistenceDelegate():
   
    def __init__(self):
        pass
        
#+END_SRC


*** Tests
#+NAME: test_class_persistent_delegate
#+BEGIN_SRC python
class TestPersistentDelegate(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        self.persistent_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

#+END_SRC


** Other functions
   Other functions that help =System= perform the operations. 
   
***  Check if =user= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistent_user_exists
#+BEGIN_SRC python
    def user_exists(self, user):
        if user in User.get_all():
            return True
        else:
            return False
#+END_SRC

**** Tests
#+NAME: test_persistent_user_exists
#+BEGIN_SRC python
    def test_user_exists(self):
         print "test_user_exists"
         user = User.get_by_id(1)
         self.assertEqual(self.persistent_delegate.user_exists(user), True)

#+END_SRC


***  Add a user to the system
    This function adds a user to the user-set maintained by the system.
#+NAME: persistent_add_user
#+BEGIN_SRC python
    def add_user(self, user):
        user.save()
        return user

#+END_SRC

**** Tests
#+NAME: test_persistent_add_user
#+BEGIN_SRC python
    def test_add_user(self):
         print "test_add_user"
         name = Name(name="some user")
         name.save()
         email = Email(email="tt@kk.com")
         email.save()
         role = Role(name="admin", centre_nc=None, centre_oc=None)
         role.save()
         
         user = User(name=name,
                     email=email,
                     roles=[Role.get_by_id(1)])
         user = self.persistent_delegate.add_user(user)
         self.assertEqual(self.persistent_delegate.user_exists(user), True)

#+END_SRC


***  Update a user in the system
#+NAME: persistent_update_user
#+BEGIN_SRC python 
    def update_user(self, name, email, user):
        user.set(name=name)
        user.set(email=email)
        user.save()
        return user

#+END_SRC
**** Tests
#+NAME: test_persistent_update_user
#+BEGIN_SRC python
    def test_update_user(self):
        print "test_update_user"
        name = Name(name="some user")
        name.save()
        email = Email(email="tt@kk.com")
        email.save()
        user = User(name=name,
                    email=email,
                    roles=[Role.get_by_id(2)], user_status="active")
        new_user = self.persistent_delegate.add_user(user)

        user_name1=Name(name="alaska")
        user_name1.save()
        user_email1=Email(email="alaska@gmail.com")
        user_email1.save()
        updated_user = self.persistent_delegate.update_user(user_name1, user_email1, new_user)
        self.assertEqual(updated_user.get("name").get("name"), "alaska")
 
#+END_SRC


***  Delete a user from the system
#+NAME: persistent_delete_user
#+BEGIN_SRC python 
    def delete_user(self, user):
        user.set(user_status="inactive")
        user.save()
        return user
#+END_SRC
**** Tests
#+NAME: test_persistent_delete_user
#+BEGIN_SRC python
    def test_delete_user(self):
        name = Name(name="some user")
        name.save()
        email = Email(email="tt@kk.com")
        email.save()
        user = User(name=name,
                    email=email,
                    roles=[Role.get_by_id(2)], user_status="active")
        new_user = self.persistent_delegate.add_user(user)
        del_user = self.persistent_delegate.delete_user(new_user)
        self.assertEqual(del_user.get("user_status") , "inactive")
#+END_SRC


***  Add a role to the user in the system
#+NAME: persistent_add_role_to_user
#+BEGIN_SRC python 
    def add_role_to_user(self, user, role):
        user.append_role(role)
        user.save()
        return user
#+END_SRC
**** Tests
#+NAME: test_persistent_add_role_to_user
#+BEGIN_SRC python
    def test_add_role_to_user(self):
        name = Name(name="some user")
        name.save()
        email = Email(email="tt@kk.com")
        email.save()
        user = User(name=name,
                    email=email,
                    roles=[Role.get_by_id(2)], user_status="active")
        new_user = self.persistent_delegate.add_user(user)
        user_with_new_role = self.persistent_delegate.add_role_to_user(new_user, Role.get_by_id(3))
        self.assertTrue(len(user_with_new_role.get('roles'))==2)
#+END_SRC


***  Get all Active users from the system

    This return the user_set maintained by the system.
#+NAME: persistent_get_users
#+BEGIN_SRC python
    def get_users(self):
        return self.get_active_users()

#+END_SRC
**** Tests
#+NAME: test_persistent_get_users
#+BEGIN_SRC python
    def test_get_users(self):
        print "test_get_users"
        name = Name(name="some user")
        name.save()
        email = Email(email="tt@kk.com")
        email.save()
        user = User(name=name,
                    email=email,
                    roles=[Role.get_by_id(2)], user_status="active")
        new_user = self.persistent_delegate.add_user(user)
        self.assertEqual(len(self.persistent_delegate.get_users()), 2)

#+END_SRC


***  Check if =role= already exists
    This function checks if a user is already in the role-set of the =System=.
#+NAME: persistent_role_exists
#+BEGIN_SRC python
    def role_exists(self, role):
        if role in Role.get_all():
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_role_exists
#+BEGIN_SRC python
    def test_role_exists(self):
         print "test_role_exists"
         role = Role.get_by_id(1)
         self.assertEqual(self.persistent_delegate.role_exists(role), True)

#+END_SRC


***  Add a role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: persistent_add_role
#+BEGIN_SRC python
    def add_role(self, role):
        role.save()
        return role

#+END_SRC

**** Tests
#+NAME: test_persistent_add_role
#+BEGIN_SRC python
    def test_add_role(self):
         print "test_add_role"
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = self.persistent_delegate.add_role(role)
         self.assertEqual(self.persistent_delegate.role_exists(role), True)

#+END_SRC


***  Get all roles from the System
    This return the role_set maintained by the system.
#+NAME: persistent_get_roles
#+BEGIN_SRC python
    def get_roles(self):
        self.role_set = Role.get_all()
        return self.role_set

#+END_SRC
**** Tests
#+NAME: test_persistent_get_roles
#+BEGIN_SRC python
    def test_get_roles(self):
         print "test_get_roles"
         self.assertEqual(len(self.persistent_delegate.get_roles()), 4)

#+END_SRC


***  Add occ role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: persistent_add_occ_role
#+BEGIN_SRC python
    def add_occ_role(self, name, new_oc, centre_nc):
        self.new_role = Role(name=name,centre_oc=new_oc,centre_nc=centre_nc)
        self.new_role.save()
        return self.new_role
#+END_SRC

**** Tests
#+NAME: test_persistent_add_occ_role
#+BEGIN_SRC python
    def test_add_occ_role(self):
         print "test_add_occ_role"
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = self.persistent_delegate.add_role(role)
         self.assertEqual(self.persistent_delegate.role_exists(role), True)

#+END_SRC


***  Add ncc role to the system
    This function adds a user to the role-set maintained by the system.
#+NAME: persistent_add_ncc_role
#+BEGIN_SRC python
    def add_ncc_role(self, name, centre_oc, new_nc):
        self.new_role = Role(name=name,centre_oc=centre_oc,centre_nc=new_nc)
        self.new_role.save()
        return self.new_role
#+END_SRC

**** Tests
#+NAME: test_persistent_add_ncc_role
#+BEGIN_SRC python
    def test_add_ncc_role(self):
         print "test_add_role"
         role = Role(name='user',centre_oc=None,centre_nc=None)
         role = self.persistent_delegate.add_role(role)
         self.assertEqual(self.persistent_delegate.role_exists(role), True)

#+END_SRC


***  Check if =institute= already exists
    This function checks if a user is already in the institute-set of the =System=.
#+NAME: persistent_institute_exists
#+BEGIN_SRC python
    def institute_exists(self, institute):
        if institute in Institute.get_all():
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_institute_exists
#+BEGIN_SRC python
    def test_institute_exists(self):
         print "test_institute_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.persistent_delegate.add_institute(ins)
         self.assertEqual(self.persistent_delegate.institute_exists(inst), True)

#+END_SRC


***  Add an institute to the system
    This function adds an institute to the institute-set maintained by the system.
#+NAME: persistent_add_institute
#+BEGIN_SRC python
    def add_institute(self, institute):
        institute.save()
        return institute

#+END_SRC

**** Tests
#+NAME: test_persistent_add_institute
#+BEGIN_SRC python
    def test_add_institute(self):
         print "test_add_institute"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.persistent_delegate.add_institute(ins)
         self.assertEqual(self.persistent_delegate.institute_exists(inst), True)

#+END_SRC


***  Update an institute in the system
#+NAME: persistent_update_institute
#+BEGIN_SRC python
    def update_institute(self, institute, name, address):
        institute.set(name=name)
        institute.set(address=address)
        institute.save()
        return institute
#+END_SRC
**** Tests
#+NAME: test_persistent_update_institute
#+BEGIN_SRC python
    def test_update_institute(self):
         print "test_update_institute"
         ins = Institute(name='IIIT',address='Hyderabad')
         institute = self.persistent_delegate.add_institute(ins)
         updated_institute = self.persistent_delegate.update_institute(ins, "IIT", "Madras")
         self.assertEqual(self.persistent_delegate.institute_exists(institute), True)
         self.assertEqual(updated_institute.get("name"), "IIT")
         self.assertEqual(updated_institute.get("address"), "Madras")
#+END_SRC


***  Get all institutes from the system
    This return the institute_set maintained by the system.
#+NAME: persistent_get_institutes
#+BEGIN_SRC python
    def get_institutes(self):
        self.institute_set = Institute.query.all()   
        return self.institute_set

#+END_SRC

**** Tests
#+NAME: test_persistent_get_institutes
#+BEGIN_SRC python
    def test_get_institutes(self):
         print "test_get_institutes"
         ins = Institute(name='IIIT',address='Hyderabad')
         inst = self.persistent_delegate.add_institute(ins)
         self.assertEqual(len(self.persistent_delegate.get_institutes()), 1)

#+END_SRC


***  Check if =oc= already exists
    This function checks if an outreach-centre is already in the oc-set of the =System=.
#+NAME: persistent_oc_exists
#+BEGIN_SRC python
    def oc_exists(self, oc):
        if oc in OC.get_all():
            return True
        else:
            return False

#+END_SRC

**** Tests
#+NAME: test_persistent_oc_exists
#+BEGIN_SRC python
    def test_oc_exists(self):
         print "test_oc_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)
         self.assertEqual(self.persistent_delegate.oc_exists(oc), True)

#+END_SRC


***  Add a oc to the system
    This function adds an outreach centre to the oc-set maintained by the system.
#+NAME: persistent_add_oc
#+BEGIN_SRC python
    def add_oc(self, institute, spokes, oc_target):
        self.new_oc = OC(institute=institute, spokes=spokes, oc_target = oc_target)
        self.new_oc.save()
        return self.new_oc
#+END_SRC

**** Tests
#+NAME: test_persistent_add_oc
#+BEGIN_SRC python
    def test_add_oc(self):
         print "test_persistent_add_oc"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)
         self.assertEqual(self.persistent_delegate.oc_exists(oc), True)
#+END_SRC


***  Add a nc to the system
    This function adds an outreach centre to the oc-set maintained by the system.
#+NAME: persistent_add_nc
#+BEGIN_SRC python
    def add_nc(self, institute, oc, nc_target, workshops):
        self.new_nc = NC(institute=institute, hub=oc, nc_target=nc_target,
                         workshops=workshops)
        self.new_nc.save()
        oc.append_spoke(self.new_nc)
        return self.new_nc
#+END_SRC

**** Tests
#+NAME: test_persistent_add_nc
#+BEGIN_SRC python
    def test_add_nc(self):
         print "test_persistent_add_nc"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         institute=Institute.get_by_id(1)
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)
         nc_target=None
         workshops=[]
         nc = self.persistent_delegate.add_nc(institute, oc, nc_target, workshops)
         self.assertEqual(self.persistent_delegate.nc_exists(nc), True)

#+END_SRC


***  Get ocs from system

    This return the oc_set maintained by the system.
#+NAME: persistent_get_ocs
#+BEGIN_SRC python
    def get_ocs(self):
        self.oc_set = OC.query.all()
        return self.oc_set

#+END_SRC

#+NAME: test_persistent_get_ocs
#+BEGIN_SRC python
    def test_get_ocs(self):
         print "test_get_ocs"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)

         self.assertEqual(len(self.persistent_delegate.get_ocs()), 1)

#+END_SRC


***  Check if =nc= already exists
    This function checks if a nodal-centre is already in the nc-set of the =System=.
#+NAME: persistent_nc_exists
#+BEGIN_SRC python
    def nc_exists(self, nc):
        if nc in NC.get_all():
            return True
        else:
            return False
#+END_SRC

**** Tests
#+NAME: test_persistent_nc_exists
#+BEGIN_SRC python
    def test_nc_exists(self):
         print "test_persistent_nc_exists"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         institute=Institute.get_by_id(1)
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)
         nc_target=None
         workshops=[]
         nc = self.persistent_delegate.add_nc(institute, oc, nc_target, workshops)
         self.assertEqual(self.persistent_delegate.nc_exists(nc), True)
#+END_SRC


***  Get ncs from system

    This return the nc_set maintained by the system.
#+NAME: persistent_get_ncs
#+BEGIN_SRC python
    def get_ncs(self):
        self.nc_set = NC.query.all()
        return self.nc_set

#+END_SRC

#+NAME: test_persistent_get_ncs
#+BEGIN_SRC python
    def test_get_ncs(self):
         print "test_get_ncs"
         ins = Institute(name='IIIT',address='Hyderabad')
         ins.save()
         institute=Institute.get_by_id(1)
         spokes=[]
         oc_target = None
         oc = self.persistent_delegate.add_oc(Institute.get_by_id(1), spokes, oc_target)
         nc_target=None
         workshops=[]
         nc = self.persistent_delegate.add_nc(institute, oc, nc_target, workshops)
         self.assertEqual(len(self.persistent_delegate.get_ncs()), 1)

#+END_SRC


***  Get all active_users from system
    This function returns All the active users from the user_set.
#+NAME: persistent_get_active_users
#+BEGIN_SRC python
    def get_active_users(self): 
        user_set = User.get_all()
        active_user_set = filter(lambda x: x.get("user_status")=="active",
                                  user_set)
        return active_user_set
#+END_SRC
**** Tests
#+NAME: test_persistent_get_active_users
#+BEGIN_SRC python
    def test_get_active_users(self):
         name = Name(name="some user")
         name.save()
         email = Email(email="tt@kk.com")
         email.save()
         user = User(name=name,
                     email=email,
                     roles=[Role.get_by_id(1)], user_status="active")
         user = self.persistent_delegate.add_user(user)
         self.assertEqual(self.persistent_delegate.user_exists(user), True)
         active_user_list = self.persistent_delegate.get_active_users()
         self.assertEqual(len(active_user_list), 2)

#+END_SRC


***  Check if =workshop= already exists
    This function checks if a workshop is already in the workshop-set of the =System=.
#+NAME: persistent_workshop_exists
#+BEGIN_SRC python
    def workshop_exists(self, workshop):
        if workshop in Workshop.get_all():
            return True
        else:
            return False
#+END_SRC

**** Tests
#+NAME: test_persistent_workshop_exists
#+BEGIN_SRC python
    def test_workshop_exists(self):
        print "test_workshop_exists"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        self.assertEqual(self.persistent_delegate.workshop_exists(workshop), True)

#+END_SRC


***  Add a workshop to the system
    This function adds a workshop to the workshop-set maintained by the system.
#+NAME: persistent_add_workshop
#+BEGIN_SRC python
    def add_workshop(self, institute, name, ws_target, artefacts, status, nc
):
        new_workshop = Workshop(institute = institute,
                                name = name,
                                ws_target = ws_target,
                                artefacts = artefacts,
                                status = status,
                                nc = nc,
                                a_date = None,
                                a_participants = 0,
                                a_experiments = 0,
                                a_usage = 0)
        new_workshop.save()
        return new_workshop

#+END_SRC

**** Tests
#+NAME: test_persistent_add_workshop
#+BEGIN_SRC python
    def test_add_workshop(self):
        print "test_add_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        self.assertEqual(self.persistent_delegate.workshop_exists(workshop), True)
#+END_SRC


***  Cancel workshop
#+NAME: persistent_cancel_workshop
#+BEGIN_SRC python
    def cancel_workshop(self, workshop):
        workshop.set(status = Status.cancelled)
        workshop.save()
        return workshop
#+END_SRC
**** Tests 
#+NAME: test_persistent_cancel_workshop
#+BEGIN_SRC python
    def test_cancel_workshop(self):
        print "test_cancel_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)

        cancelled_workshop = self.persistent_delegate.cancel_workshop(workshop)

        self.assertEqual(cancelled_workshop.get("status"), Status.cancelled)
#+END_SRC


***  Reschedule Workshop
#+NAME: persistent_reschedule_workshop
#+BEGIN_SRC python
    def reschedule_workshop(self, workshop, wstarget):
        workshop.set(status = Status.pending)
        workshop.set(ws_target = wstarget)
        workshop.save()
        return workshop

#+END_SRC
**** Tests
#+NAME: test_persistent_reschedule_workshop
#+BEGIN_SRC python
    def test_reschedule_workshop(self):
        print "test_reschedule_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        ws_new_target = WSTarget(usage = 5000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        rescheduled_workshop = self.persistent_delegate.reschedule_workshop(workshop, ws_new_target)

        self.assertEqual(rescheduled_workshop.get("status"), Status.pending)
        self.assertEqual(rescheduled_workshop.get("ws_target").get("usage"), 5000)
#+END_SRC


***  Conduct Workshop
#+NAME: persistent_conduct_workshop
#+BEGIN_SRC python
    def conduct_workshop(self, workshop):
        workshop.set(status = Status.completed)
        workshop.save()
        return workshop
#+END_SRC
**** Tests
#+NAME: test_persistent_conduct_workshop
#+BEGIN_SRC python
    def test_conduct_workshop(self):
        print "test_conduct_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)

        conducted_workshop = self.persistent_delegate.conduct_workshop(workshop)

        self.assertEqual(conducted_workshop.get("status"), Status.completed)
#+END_SRC


***  Upload Artefact
#+NAME: persistent_upload_artefact
#+BEGIN_SRC python
    def upload_artefact(self, workshop, new_artefact):
        artefacts = workshop.get("artefacts")
        artefacts.append(new_artefact)
        workshop.set(artefacts = artefacts)
        workshop.set(status = Status.pending_approval)
        workshop.save()
        return workshop
#+END_SRC
**** Tests
#+NAME: test_persistent_upload_artefact
#+BEGIN_SRC python
    def test_upload_artefact(self):
        print "test_upload_artefact"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                a_type = Type.photo)

        workshop = self.persistent_delegate.upload_artefact(workshop, new_artefact)

        self.assertEqual(workshop.get("status"), Status.pending_approval)
        self.assertEqual(len(self.persistent_delegate.get_artefacts_of_a_workshop(workshop)), 1)
        self.assertEqual(len(self.persistent_delegate.get_artefacts()), 1)

#+END_SRC


***  Approve Workshop
#+NAME: persistent_approve_workshop
#+BEGIN_SRC python
    def approve_workshop(self, workshop):
        workshop.set(status = Status.approved)
        workshop.save()
        return workshop
#+END_SRC
**** Tests
#+NAME: test_persistent_approve_workshop
#+BEGIN_SRC python
    def test_approve_workshop(self):
        print "test_approve_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)

        approved_workshop = self.persistent_delegate.approve_workshop(workshop)

        self.assertEqual(approved_workshop.get("status"), Status.approved)
#+END_SRC


***  Reject Workshop
#+NAME: persistent_reject_workshop
#+BEGIN_SRC python
    def reject_workshop(self, workshop):
        workshop.set(status = Status.rejected)
        workshop.save()
        return workshop
#+END_SRC
**** Tests
#+NAME: test_persistent_reject_workshop
#+BEGIN_SRC python
    def test_reject_workshop(self):
        print "test_reject_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)

        rejected_workshop = self.persistent_delegate.reject_workshop(workshop)

        self.assertEqual(rejected_workshop.get("status"), Status.rejected)
#+END_SRC


***  Delete Artefact
#+NAME: persistent_delete_artefact
#+BEGIN_SRC python
    def delete_artefact(self, workshop, artefact):
        artefact_set = workshop.get("artefacts")
        new_set = filter(lambda art: not art.get("name") ==
                         artefact.get("name"), artefact_set)

        workshop.set(artefacts = new_set)
        workshop.set(status = Status.pending_approval)
        workshop.save()
        return workshop
#+END_SRC
**** Tests
#+NAME: test_persistent_delete_artefact
#+BEGIN_SRC python
    def test_delete_artefact(self):
        print "test_delete_artefact"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                a_type = Type.photo)

        artefact_upload_workshop = self.persistent_delegate.upload_artefact(workshop, new_artefact)
        artefact_delete_workshop = self.persistent_delegate.delete_artefact(workshop, new_artefact)

        self.assertEqual(artefact_delete_workshop.get("status"), Status.pending_approval)
        self.assertEqual(len(self.persistent_delegate.get_artefacts_of_a_workshop(artefact_delete_workshop)), 0)

#+END_SRC


***  Get all workshops from the system

    This return the workshop_set maintained by the system.
#+NAME: persistent_get_workshops
#+BEGIN_SRC python
    def get_workshops(self):
        self.workshop_set = Workshop.get_all()
        return self.workshop_set

#+END_SRC
**** Tests
#+NAME: test_persistent_get_workshops
#+BEGIN_SRC python
    def test_get_all_workshops(self):
        print "test_get_all_workshops"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        self.assertEqual(self.persistent_delegate.workshop_exists(workshop), True)
        self.assertEqual(len(self.persistent_delegate.get_workshops()), 1)
#+END_SRC


***  Get all artefacts from the system

    This return the artefact_set maintained by the system.
#+NAME: persistent_get_artefacts
#+BEGIN_SRC python
    def get_artefacts(self):
        self.artefact_set = Artefact.get_all()
        return self.artefact_set

#+END_SRC
**** Tests
#+NAME: test_persistent_get_artefacts
#+BEGIN_SRC python
    def test_get_artefacts(self):
        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                a_type = Type.photo)
        new_artefact.save()
        self.assertEqual(len(self.persistent_delegate.get_artefacts()), 1)

#+END_SRC


***  Get all artefacts of a workshop

    This return the workshop_set maintained by the system.
#+NAME: persistent_get_artefacts_of_a_workshop
#+BEGIN_SRC python
    def get_artefacts_of_a_workshop(self, workshop):
        self.artefact_set = workshop.get("artefacts")
        return self.artefact_set

#+END_SRC
**** Tests
#+NAME: test_persistent_get_artefacts_of_a_workshop
#+BEGIN_SRC python
    def test_get_artefacts_of_a_workshop(self):
        print "test_get_artefacts_of_a_workshop"
        institute = Institute(name='IIIT',address='Hyderabad')
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"), spokes=[], oc_target = None)
        nc = NC(institute=Institute(name="IIITH",address="Hyderabad"), hub=oc, nc_target = None, workshops=None)
        target_date = datetime.datetime.strptime("30-06-2016", '%d-%m-%Y').date()
        oc_target = OCTarget(usage = 400, date = target_date, nctargets = [])
        nc_target = NCTarget(usage = 200, date = target_date, oc_target = oc_target, wstargets = [])
        ws_target = WSTarget(usage = 4000, participants = 200, experiments = 20, date = target_date, nc_target = nc_target )
        name = Name(name = "New Workshop")
        status = Status(name = "pending")
        artefacts = []

        workshop = self.persistent_delegate.add_workshop(institute, name, ws_target, artefacts, status, nc)
        new_artefact = Artefact(name = "Photo", path = "/main/photos",
                                a_type = Type.photo)

        workshop = self.persistent_delegate.upload_artefact(workshop, new_artefact)

        self.assertEqual(len(self.persistent_delegate.get_artefacts_of_a_workshop(workshop)), 1)
#+BEGIN_SRC python
#+END_SRC




*** Get an object
    A generic function to find an object of type =cls= matching a given a criteria

#+NAME: persistent_get_object
#+BEGIN_SRC python
    def get_object(self, cls, **kwargs):
        ret_val = None
        try:
            ret_val = cls.apply_filters(**kwargs)[0]
        except NotFoundError as e:
            ret_val = None
        
        return ret_val

#+END_SRC
	

*** Get Name 
    This function returns a Name object from the database based on the name
    string provided.

#+NAME: persistent_get_name
#+BEGIN_SRC python
    def get_name(self, **kwargs):
        return self.get_object(Name, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistent_get_name
#+BEGIN_SRC python
    def test_get_name(self):
         print "test_get_name"
         name_obj = self.persistent_delegate.get_name(name=Config.admin_name)
         self.assertEqual(name_obj.get("name"),  Config.admin_name)

#+END_SRC


*** Get Email
    This function returns an Email object from the database based on the email
    string provided.

#+NAME: persistent_get_email
#+BEGIN_SRC python
    def get_email(self, **kwargs):
        return self.get_object(Email, **kwargs)
    
#+END_SRC

**** Tests
#+NAME: test_get_email
#+BEGIN_SRC python
    def test_persistent_get_email(self):
         print "test_get_email"
         email_obj = self.persistent_delegate.get_email(email=Config.admin_email)
         self.assertEqual(email_obj.get("email"), Config.admin_email)

#+END_SRC


*** Get User
    This function returns a user if present in the database.  If the user is
    not present, =None= type is returned.
#+NAME: persistent_get_user
#+BEGIN_SRC python
    def get_user(self, **kwargs):
        return self.get_object(User, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistent_get_user
#+BEGIN_SRC python
    def test_get_user(self):
         print "test_get_user"
         email = Email(email=Config.admin_email)
         user_obj = self.persistent_delegate.get_user(email=email)
         self.assertEqual(user_obj.get("email").get("email"), 
                              Config.admin_email)

#+END_SRC


*** Get Role
    This function returns either admin or user role from the roles in database
#+NAME: persistent_get_role
#+BEGIN_SRC python
    def get_role(self, **kwargs):
        return self.get_object(Role, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistent_get_role
#+BEGIN_SRC python
    def test_get_role(self):
         print "test_get_role"
         role_obj = self.persistent_delegate.get_role(name=Config.admin_role)
         self.assertEqual(role_obj.get("name"), Config.admin_role)

#+END_SRC


*** Get user by Email
    This function returns the user by email from the database
#+NAME: get_user_by_email
#+BEGIN_SRC python
    def get_user_by_email(self, email):
        return self.get_user(email=email)

#+END_SRC

**** Tests
#+NAME: test_get_user_by_email
#+BEGIN_SRC python
    def test_get_user_by_email(self):
        print "test_get_user_by_email"
        email = Email(email=Config.admin_email)
        user = self.persistent_delegate.get_user_by_email(email)
        self.assertEqual(user.get("email"), email)

        email = Email(email="tt@kk.com")
        email.save()
        user = self.persistent_delegate.get_user_by_email(email)
        self.assertEqual(user, None)

#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 

#+name: imports_for_persistent_delegates
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.config.config import Config
from runtime.exceptions.custom_exceptions import *
#+end_src

** Tests
*** Imports 

#+name: imports_for_tests_persistence
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.persistent_delegates import *


config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:
  
** sources

#+BEGIN_SRC python :tangle persistent_delegates.py :eval no :noweb yes
<<imports_for_persistent_delegates>>
<<class_persistence_delegate>>
<<persistent_get_object>>
<<persistent_user_exists>>
<<persistent_add_user>>
<<persistent_get_user>>
<<persistent_get_email>>
<<persistent_get_name>>
<<persistent_update_user>>
<<persistent_delete_user>>
<<persistent_add_role_to_user>>
<<persistent_get_users>>
<<persistent_get_role>>
<<persistent_get_active_users>>
<<persistent_add_oc>>
<<persistent_add_nc>>
<<persistent_get_ocs>>
<<persistent_get_ncs>>
<<persistent_oc_exists>>
<<persistent_nc_exists>>
<<persistent_role_exists>>
<<persistent_add_role>>
<<persistent_add_occ_role>>
<<persistent_add_ncc_role>>
<<persistent_get_roles>>
<<persistent_add_institute>>
<<persistent_update_institute>>
<<persistent_get_institutes>>
<<persistent_institute_exists>>
<<persistent_add_workshop>>
<<persistent_cancel_workshop>>
<<persistent_reschedule_workshop>>
<<persistent_conduct_workshop>>
<<persistent_approve_workshop>>
<<persistent_reject_workshop>>
<<persistent_workshop_exists>>
<<persistent_upload_artefact>>
<<persistent_delete_artefact>>
<<persistent_get_workshops>>
<<persistent_get_artefacts>>
<<persistent_get_artefacts_of_a_workshop>>
<<persistent_get_active_users>>
#+end_src
** tests
#+BEGIN_SRC python :tangle test_persistent_delegates.py :eval no :noweb yes
<<imports_for_tests_persistence>>
<<test_class_persistent_delegate>>
#<<test_persistent_user_exists>>
#<<test_persistent_get_name>>
<<test_persistent_add_user>>
#<<test_persistent_get_user>>
#<<test_persistent_get_role>>
#<<test_persistent_get_email>>
#<<test_persistent_update_user>>
#<<test_persistent_delete_user>>
#<<test_persistent_add_role_to_user>>
#<<test_persistent_get_users>>
#<<test_persistent_get_active_users>>
#<<test_persistent_add_oc>>
#<<test_persistent_oc_exists>>
#<<test_persistent_add_nc>>
#<<test_persistent_nc_exists>>
#<<test_persistent_get_ocs>>
#<<test_persistent_get_ncs>>
#<<test_persistent_role_exists>>
#<<test_persistent_add_role>>
#<<test_persistent_add_occ_role>>
#<<test_persistent_add_ncc_role>>
#<<test_persistent_get_roles>>
#<<test_persistent_institute_exists>>
#<<test_persistent_add_institute>>
#<<test_persistent_update_institute>>
#<<test_persistent_get_institutes>>
#<<test_persistent_add_workshop>>
#<<test_persistent_workshop_exists>>
#<<test_persistent_cancel_workshop>>
#<<test_persistent_reschedule_workshop>>
#<<test_persistent_conduct_workshop>>
#<<test_persistent_upload_artefact>>
#<<test_persistent_approve_workshop>>
#<<test_persistent_reject_workshop>>
#<<test_persistent_delete_artefact>>
#<<test_persistent_get_workshops>>
#<<test_persistent_get_artefacts>>
#<<test_persistent_get_artefacts_of_a_workshop>>
#<<test_persistent_get_active_users>>
<<run_test_cases>>

#+end_src

