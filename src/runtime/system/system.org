#+TITLE: System implementation for OutReach Portal 3.0
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

A system has clear boundaries of input, output and state.
In the context of our application, the system interacts with
the external world (through command line function calls)
and also manages the entity objects in such a way that the
system invariants are maintained. 


The system holds two state variables:

 - =user_set= :: The set of users in the system
 - =session_set= :: The set of sessions in the system

The system's inputs are in terms of /operations/.  Each
operation consists of an operation name and a sequence of
arguments.  

In this implementation, an operation is identified by a
class.  The dictionary =ops_table= maps operation names to
their corresponding classes.

Each operation is divided into five checks.  A /check/ is a
predicate that either returns true or throws an exception.

The following checks are performed:

  - Arity check :: checks if the operation has the right
       number  of arguments.

  - Type check :: checks if the arguments have the correct
       type. 

  - Auth check :: checks if the session performing the
       operation is authorized to do so.

  - State check :: checks if the operation meets all the
       constraints imposed by the state of the system
       (referential integrity constraints, etc.)
 

** Structure of each operation class

The class corresponding to each operation has five fields:

  - arg_types :: a list of type predicates.  The length of
       this list is the arity of the operation.  The arity
       check is simply a comparison of the length of this
       list with the length of the list of arguments.  Each
       predicate in the =arg_types= list is applied to the
       corresponding argument to check the type of that
       argument.

  - auth_check :: a function that checks if the  =args= (which
       may include a session) together satisfy the
       authorization conditions imposed by the operation. 

  - state_check :: a function that checks =args= and checks
       if the particular state invariant holds.

  - action :: a function on args that (presumably) changes
       the state of the system and also returns an answer.
       An exception thrown by this function indicates a
       serious failure in the application (e.g., out of
       memory error). 

* The =System= class

** Constructor

   The constructor ensures that the system ensures the presence of at least one
   user with role =admin=.

#+NAME: class_system
#+begin_src python
class System ():
    admin_user = User(name=Name(name=Config.admin_name), 
                      email=Email(email="app-admin@vlabs.ac.in") 
                      )
    admin_user.set_role(role=Role(name="admin",centre=None))
    admin_user.set_role(role=Role(name="guest",centre=None))
    user_set = [admin_user]
    session_set = []
    role_set = [Role.admin,Role.reviewer,Role.guest]

   
            #     'del_user' : DelUser}

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def is_session_admin(session):
        return session.get("role").get_name() == "admin"
    
    @staticmethod    
    def is_session_OCC(session):
        return session.get("role").get_name()== "OCC"

    @staticmethod    
    def is_session_NCC(session):
        return session.get("role").get_name()== "NCC"
    
    @staticmethod    
    def is_session_reviewer(session):
        return session.get("role").get_name()== "reviewer"
    
    @staticmethod    
    def is_session_guest(session):
        return session.get("role").get_name()== "guest"

#+end_src

*** Test Constructor
#+NAME: test_system_constructor
#+BEGIN_SRC python
class TestSystemConstructor(TestCase):
    TESTING = True

   
    def test_system_constructor(self):
        print "test_system_constructor"
        self.assertEqual(System.user_set[0].get("name").get("name"), 
                         Config.admin_name)
        self.assertEqual(System.user_set[0].get("email").get("email"), 
                         "app-admin@vlabs.ac.in")
        self.assertEqual(System.user_set[0].get_role()[0].get_name(), 
                         "admin")

    def test_is_session_admin(self):
        print "test_is_session_admin"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name=Config.admin_name,centre=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_admin(session), True)
    
    def test_is_session_OCC(self):
        print "test_is_session_OCC"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name="OCC",centre=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_OCC(session), True)
    
    def test_is_session_NCC(self):
        print "test_is_session_NCC"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name="NCC",centre=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_NCC(session), True)

    def test_is_session_reviewer(self):
        print "test_is_session_reviewer"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name="reviewer",centre=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_reviewer(session), True)
    
    def test_is_session_guest(self):
        print "test_is_session_guest"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name="guest",centre=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_guest(session), True)

#+END_SRC


** Arity and Type check methods 

   The =do= method is the main work-horse of =Controller=.  
#+NAME: arity_type_checks
#+BEGIN_SRC python
   
    @staticmethod
    def arity_check(args, n):
       if  (len(args) != n) :
          raise ArityError("arity mismatch: size of args  does not " + 
                           "match operation arity " )

    @staticmethod
    def type_check(args, arg_types):
        for key, value in args.iteritems():
            if not arg_types[key](value):
                raise TypeError("type mismatch: argument  is not of " + 
                                "type " )
       
   
#+end_src

*** Test Arity and Type Checks
#+NAME: test_arity_and_types
#+BEGIN_SRC python
class TestSystemArityAndType(TestCase):
    TESTING = True

    def test_arity(self):
        print "test_arity"
        with self.assertRaises(ArityError):
            System.arity_check([1,2], 3)

    def test_type_checks(self):
        print "test_type_checks"
        args = {"name": Name(name="Jimi Hendrix"),
                "email": Name(name="Jimi Hendrix")
                }

        arg_types = {"name": is_name,
                     "email": is_email
                     }

        with self.assertRaises(TypeError):
            System.type_check(args, arg_types)

#+END_SRC


** =do= method 
#+NAME: do_function
#+begin_src python
    @staticmethod   
    def do(op, **args):
        cls = ops_table[op]
        arg_types  = cls.arg_types
        auth_check = cls.auth_check
        state_check = cls.state_check

        try:
            System.arity_check(args.keys(), len(arg_types.keys()))
            System.type_check(args, arg_types)
            auth_check(args)
            state_check(args)
            return cls.action(args)
        except (ArityError, TypeError, AuthError, StateError) as err:
            print str(err)
  


#+end_src

* =AddUser=
#+NAME: class_adduser
#+begin_src python
class AddUser():
    arg_types = {"user":is_user, "session":is_session}
  
    @staticmethod
    def auth_check(args):
        session = args['session']
        if not (System.is_session_admin(session) or System.is_session_OCC(session)):
            raise AuthError("Role not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        user = args["user"]
        session = args["session"]
        if not (session in System.session_set):
            raise StateError("user not in session %s" % session.get("user").get("name").get("name"))
        if (user in System.user_set):
            raise StateError("user %s already in System" % user.get("name").get("name"))

            
    @staticmethod
    def action(args):
        user = args["user"]
        session = args["session"]
        System.user_set.append(user)
        user.set_role(role=Role(name="guest",centre=None))
        return user
#+end_src
*** Test AddUser
#+NAME: test_adduser
#+BEGIN_SRC python
class TestAddUser(TestCase):
    TESTING = True
    def setUp(self):
        pass

    def tearDown(self):
        admin = filter( lambda x: x.get("email").get("email") == "app-admin@vlabs.ac.in", System.user_set)
        System.user_set = admin

    def test_add_user(self):
        print "test_add_user"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name=Config.admin_name,centre=None))
        System.session_set.append(session)
 
        user=User(name=Name(name="me"),email=Email(email="abc@gmail.com"))

        System.do("add_user",user=user,session=session)
        
        u=System.user_set[1]
        self.assertEqual(u.get("name").get("name"),"me")

#+END_SRC

* =DeleteUser=
#+NAME: class_adduser
#+begin_src python
class DeleteUser():
    arg_types = {"user":is_user, "session":is_session}
  
    @staticmethod
    def auth_check(args):
        session = args['session']
        user = args['user']
        if System.is_session_admin(session):
            return True
        elif System.is_session_OCC(session):
            role = filter (lambda x: x.get_name() == NCC and x.centre.hub == session.get("role").centre, user.roles)
            if role:
                return True
        else:
            raise AuthError("Role not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        user = args["user"]
        session = args["session"]
        for s in System.session_set:
            if(s.get("user")==user):
              raise StateError("cannot delete user, user is in session %s" % s.get("user").get("name"))

        if not (session in System.session_set):
            raise StateError("user not in session %s" % session.get("user").get("name"))
        if not (user in System.user_set):
            raise StateError("user %s not in System" % user.get("name").get("name"))

            
    @staticmethod
    def action(args):
        user = args["user"]
        session = args["session"]
        new_users = filter(lambda x: x.get("email").get("email") != user.get("email").get("email"), System.user_set)
        System.user_set= new_users 


#+end_src
*** Test DeleteUser
#+NAME: test_adduser
#+BEGIN_SRC python
class TestDeleteUser(TestCase):
    TESTING = True
    def setUp(self):
        pass

    def tearDown(self):
        admin = filter( lambda x: x.get("email").get("email") == "app-admin@vlabs.ac.in", System.user_set)
        System.user_set = admin

    def test_delete_admin_user(self):
        print "test_delete_user"
        admin_user=System.user_set[0]
        session = Session(user=admin_user,role=Role(name=Config.admin_name,centre=None))
        System.session_set.append(session)
 
        other_admin_user=User(name=Name(name="me"),email=Email(email="abc@gmail.com"))
        System.do("add_user", user=other_admin_user, session=session)
        other_admin_user.set_role(role=Role(name="admin",centre=None))
        length = len(System.user_set)
        System.do("delete_user",user=other_admin_user,session=session)
        new_length = len(System.user_set)
        
        self.assertEqual(new_length+1, length)

#+END_SRC

** =del_user=
** =show_users=

** =get_user_by_email=
** =make_user=
** =get_email_of_user=
** =get_name_of_user=
** =get_role_of_user=
** =login=
** =del_session=
** =show_sessions=

* =show_users=

* =get_user_by_email=
* =make_user=
* =get_email_of_user=
* =get_name_of_user=
* =get_role_of_user=
* =login=
#+NAME: class_login
#+begin_src python
class login():
    arg_types = {"user":is_user, "role":is_role}
  
    @staticmethod
    def auth_check(args):
        user = args['user']
        role = args['role']
        for rol in user.roles:
            if role.name == rol.name:
                return
        raise AuthError("User not Authorized to take this role")
        
    @staticmethod
    def state_check(args):
        user = args["user"]
        role = args["role"]
        if role not in System.role_set:
            raise StateError("role %s not in System " % role.name)
        if (user not in System.user_set):
            raise StateError("user %s not in System" % user.name.name)

    @staticmethod        
    def action(args):
        user = args["user"]
        role = args["role"]
        new_session = Session(user=user,role=role)
        System.session_set.append(new_session)
        return new_session
ops_table = {'add_user' : AddUser,'login':login, 'delete_user' : DeleteUser}
#+end_src
** Test login
#+NAME: test_login
#+BEGIN_SRC python
class Testlogin(TestCase):
    TESTING = True
    def test_login(self):
        print "test_login"
        login_user=System.user_set[0]
        login_role = System.role_set[0]

        System.do("login",user=login_user,role=login_role)

        session=System.session_set[0]
        self.assertEqual(session.get("user").get("name").get("name"),"admin")
        self.assertEqual(session.get("user").get_role()[0].get_name(),"admin")
#+END_SRC

* =del_session=
* =show_sessions=


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.config.config import Config
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
#from runtime.utils.class_persistence_template import *
#from runtime.rest.app import create_app

from system import *

#config = {
#   'SQLALCHEMY_DATABASE_URI': ''
#}

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system>>
<<do_function>>

<<arity_type_checks>>

<<class_adduser>>
<<class_login>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system.py :eval no :noweb yes
<<imports_for_tests>>
<<test_system_constructor>>
<<test_arity_and_types>>
<<test_adduser>>
<<test_login>>
<<run_test_cases>>

#+end_src

