#+TITLE: Persistent Entities
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

  Persistence is added to all the enttites defined in [[../objects/entities.org][=objects=]].


* Name

=Name= is a class with an attribute name of type =is_alphabetic_str=.

#+NAME: class_Name
#+begin_src python
args = {"__tablename__": "names",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(128), nullable=False),
        "users": db.relationship('User', backref='name')
        }

Name = ClassPersistenceTemplate.mk_persistent(Name, **args)
is_name = is_inst(Name)
check_name = check_pred(is_name)
#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestPersistentName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_name(self):
        print "test_create_name"
        na = Name(name="Jimi Hendrix")
        self.assertEqual(is_name(na), True)
        na.save()
        new_name = Name.get_by_id(1)
        self.assertEqual(new_name.get("name"), "Jimi Hendrix")
        self.assertRaises(TypeError, Name, name="Jimi 123 Hendrix")

    def test_update_name(self):
        print "test update name"
        na = Name(name="Jimi Hendrix")
        na.save()
        na.update(name="Bo Didley")
        na.save()
        self.assertEqual(na.get("name"), "Bo Didley")

    def test_delete_name(self):
        print "test delete name"
        na = Name(name="Jimi Hendrix")
        na.save()
        self.assertEqual(len(Name.get_all()), 1)
        na.delete()
        self.assertEqual(len(Name.get_all()), 0)

#+END_SRC


* Email
  =Email= is a class an attribute email of type =is_email_str=.
#+NAME: class_Email
#+begin_src python
args = {"__tablename__": "emails",
        "id": db.Column(db.Integer, primary_key=True),
        "email": db.Column(db.String(128), unique=True, nullable=False),
        "user": db.relationship('User', backref=db.backref('email', uselist=False))
        }

Email = ClassPersistenceTemplate.mk_persistent(Email, **args)

is_email = is_inst(Email)
check_email = check_pred(is_email)

#+end_src

** Test Email
#+NAME: class_testEmail
#+BEGIN_SRC python
class TestPersistenceEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_email(self):
        print "test_create_email"
        em = Email(email="jimi@gnu.org")
        self.assertEqual(is_email(em), True)
        em.save()
        em = Email.get_by_id(1)
        self.assertEqual(em.get("email"), "jimi@gnu.org")
        self.assertRaises(TypeError, Email, email="jimi@@gnu.org")

    def test_update_email(self):
        print "test update email"
        em = Email(email="jimi@gnu.org")
        em.save()
        em.update(email="didley@gnu.org")
        em.save()
        em = Email.get_by_id(1)
        self.assertEqual(em.get("email"), "didley@gnu.org")

    def test_delete_email(self):
        print "test delete email"
        em = Email(email="jimi@gnu.org")
        em.save()
        self.assertEqual(len(Email.get_all()), 1)
        em.delete()
        self.assertEqual(len(Email.get_all()), 0)

    def test_duplicate_email(self):
        print "test_duplicate_email"
        em1 = Email(email="jimi@gnu.org")
        em1.save()
        em2 = Email(email="jimi@gnu.org")
        with self.assertRaises(IntegrityError):
            em2.save()

#+END_SRC


* Role
  =Role= is an entity that has an attribute =name= which is an alphabetic string

#+NAME: class_Role
#+BEGIN_SRC python
args = {"__tablename__": "roles",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(128), unique=True, nullable=False),
        "users": db.relationship('User', backref='role')
        }

Role = ClassPersistenceTemplate.mk_persistent(Role, **args)

is_role = is_inst(Role)
check_role = check_pred(is_role)

#+END_SRC

** Test Role
#+NAME: class_TestRole
#+BEGIN_SRC python
class TestPersistenceRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_role(self):
        print "test_create_role"
        ro = Role(name="admin")
        self.assertEqual(is_role(ro), True)
        ro.save()
        ro = Role.get_by_id(1)
        self.assertEqual(ro.get("name"), "admin")
        self.assertRaises(TypeError, Email, email="user@")

    def test_update_role(self):
        print "test update role"
        ro = Role(name="admin")
        ro.save()
        ro.update(name="user")
        ro.save()
        ro = Role.get_by_id(1)
        self.assertEqual(ro.get("name"), "user")

    def test_delete_role(self):
        print "test delete role"
        ro = Role(name="admin")
        ro.save()
        self.assertEqual(len(Role.get_all()), 1)
        ro.delete()
        self.assertEqual(len(Role.get_all()), 0)

    def test_duplicate_role(self):
        print "test_duplicate_role"
        ro1 = Role(name="user")
        ro1.save()
        ro2 = Role(name="user")
        with self.assertRaises(IntegrityError):
            ro2.save()

#+END_SRC


* User
  A =User= entity has fields =name= of type =Name=, =email= of type =Email= and
  role of type =Role=.

#+NAME: class_User
#+BEGIN_SRC python
args = {"__tablename__": "users",
        "id": db.Column(db.Integer, primary_key=True),
        "name_id": db.Column(db.Integer, db.ForeignKey('names.id')),
        "email_id": db.Column(db.Integer, db.ForeignKey('emails.id')),
        "role_id": db.Column(db.Integer, db.ForeignKey('roles.id'))
        }

User = ClassPersistenceTemplate.mk_persistent(User, **args)

is_user = is_inst(User)
check_user = check_pred(is_user)

#+END_SRC

** Test User
#+NAME: class_TestUser
#+BEGIN_SRC python
class TestPersistenceUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_user(self):
        print "test_create_user"
        na = Name(name="Jimi Hendrix")
        na.save()
        em = Email(email="jimi@gnu.org")
        em.save()
        ro = Role(name="user")
        ro.save()
        usr = User(name=na, email=em, role=ro)
        usr.save()
        self.assertEqual(is_user(usr), True)
        n_usr = User.get_by_id(1)
        self.assertEqual(n_usr.get("email").get('email'), "jimi@gnu.org")

    def test_update_user(self):
        print "test update user"
        na1 = Name(name="Jimi Hendrix")
        na1.save()
        na2 = Name(name="Bo Didley")
        na2.save()
        em1 = Email(email="jimi@gnu.org")
        em1.save()
        em2 = Email(email="didley@gnu.org")
        em2.save()
        ro1 = Role(name="user")
        ro1.save()
        ro2 = Role(name="admin")
        ro2.save()
        usr = User(name=na1, email=em1, role=ro1)
        usr.save()

        usr.update(name=na2, email=em2, role=ro2)
        n_usr = User.get_by_id(1)

        self.assertEqual(n_usr.get("name").get("name"), "Bo Didley")

    def test_delete_role(self):
        print "test delete user"
        na = Name(name="Jimi Hendrix")
        na.save()
        em = Email(email="jimi@gnu.org")
        em.save()
        ro = Role(name="user")
        ro.save()
        usr = User(name=na, email=em, role=ro)
        usr.save()

        self.assertEqual(len(User.get_all()), 1)
        usr.delete()
        self.assertEqual(len(User.get_all()), 0)


#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.utils.class_persistence_template import *
#+end_src


** Tests
*** Imports for tests 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask.ext.testing import TestCase
from sqlalchemy.exc import IntegrityError
from entities import *
from runtime.rest.app import create_app


config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()
#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_Name>>
<<class_Email>>
<<class_Role>>
<<class_User>>
#+end_src

** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestName>>
<<class_testEmail>>
<<class_TestRole>>
<<class_TestUser>>
<<run_test_cases>>

#+end_src
