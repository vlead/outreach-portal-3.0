#+TITLE: Persistent Entities
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

  Persistence is added to all the enttites defined in [[../objects/entities.org][=objects=]].


* Name

=Name= is a class with an attribute name of type =is_alphabetic_str=.

#+NAME: class_Name
#+begin_src python
args = {"__tablename__": "names",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(128), unique=True, nullable=False),
        "users": db.relationship('User', backref='name')
        }

Name = ClassPersistenceTemplate.mk_persistent(Name, **args)
is_name = is_inst(Name)
check_name = check_pred(is_name)
#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestPersistentName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_name(self):
        print "test_create_name"
        na = Name(name="Jimi Hendrix")
        na.save()
        self.assertEqual(is_name(na), True)
        new_name = Name.get_by_id(1)
        self.assertEqual(new_name.get("name"), "Jimi Hendrix")
        self.assertRaises(TypeError, Name, name="Jimi 123 Hendrix")

    def test_update_name(self):
        print "test update name"
        na = Name(name="Jimi Hendrix")
        na.save()
        #na.update(name="Bo Didley")
        self.assertEqual(Name.get_by_id(1).get("name"), "Jimi Hendrix")
        na.set(name="Bo Didley")
        self.assertEqual(Name.get_by_id(1).get("name"), "Bo Didley")
    
    def test_delete_name(self):
        print "test delete name"
        na = Name(name="Jimi Hendrix")
        na.save()
        self.assertEqual(len(Name.get_all()), 1)
        na.delete()
        self.assertEqual(len(Name.get_all()), 0)

#+END_SRC


* Email
  =Email= is a class an attribute email of type =is_email_str=.
#+NAME: class_Email
#+begin_src python
args = {"__tablename__": "emails",
        "id": db.Column(db.Integer, primary_key=True),
        "email": db.Column(db.String(128), unique=True, nullable=False),
        "user": db.relationship('User', backref=db.backref('email', uselist=False))
        }

Email = ClassPersistenceTemplate.mk_persistent(Email, **args)

is_email = is_inst(Email)
check_email = check_pred(is_email)

#+end_src

** Test Email
#+NAME: class_testEmail
#+BEGIN_SRC python
class TestPersistenceEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_email(self):
        print "test_create_email"
        em = Email(email="jimi@gnu.org")
        em.save()
        self.assertEqual(is_email(em), True)
        em = Email.get_by_id(1)
        self.assertEqual(em.get("email"), "jimi@gnu.org")
        self.assertRaises(TypeError, Email, email="jimi@@gnu.org")

    def test_update_email(self):
        print "test update email"
        em = Email(email="jimi@gnu.org")
        em.save()
        em.set(email="didley@gnu.org")
        em = Email.get_by_id(1)
        self.assertEqual(em.get("email"), "didley@gnu.org")

    def test_delete_email(self):
        print "test delete email"
        em = Email(email="jimi@gnu.org")
        em.save()
        self.assertEqual(len(Email.get_all()), 1)
        em.delete()
        self.assertEqual(len(Email.get_all()), 0)

    def test_duplicate_email(self):
        print "test_duplicate_email"
        em1 = Email(email="jimi@gnu.org")
        em1.save()
        with self.assertRaises(IntegrityError):
            em2 = Email(email="jimi@gnu.org")
            em2.save()

#+END_SRC


* Institute
  =Institute= is an entity that has an attribute =name= which is an alphabetic string and =address= which is a string.

#+NAME: class_Institute
#+BEGIN_SRC python
args = {"__tablename__": "institutes",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(128), unique=True, nullable=False),
        "address": db.Column(db.String(128), nullable=False),
        "oc": db.relationship('OC', backref='institute'),
        "nc": db.relationship('NC', backref='institute')
        }

Institute = ClassPersistenceTemplate.mk_persistent(Institute, **args)

is_institute = is_inst(Institute)
check_institute = check_pred(is_institute)

#+END_SRC

** Test Institute
#+NAME: class_TestInstitute
#+BEGIN_SRC python
class TestPersistenceInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_institue(self):
        print "test_create_institute"
        inst = Institute(name="IIIT",address="Hyderabad")
        inst.save()
        self.assertEqual(is_institute(inst), True)
        inst = Institute.get_by_id(1)
        self.assertEqual(inst.get("name"), "IIIT")
        self.assertRaises(TypeError, Institute, name="IIIT123")
#+END_SRC

* WSTarget   
#+NAME: class_WSTarget
#+BEGIN_SRC python
args = {"__tablename__": "wstargets",
        "id": db.Column(db.Integer, primary_key = True),
        "usage": db.Column(db.Integer),
        "participants": db.Column(db.Integer),
        "experiments": db.Column(db.Integer),
        "date": db.Column(db.Date),
        "nctarget_id": db.Column(db.Integer, db.ForeignKey('nctargets.id'))
        }

WSTarget = ClassPersistenceTemplate.mk_persistent(WSTarget, **args)

is_wst = is_inst(WSTarget)
check_wstarget = check_pred(is_wst)
#+END_SRC

** Test WSTarget
#+NAME: class_TestWSTarget
#+BEGIN_SRC python
class TestWSTarget(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_wstarget(self):
        print "test_instantiate_wstarget_persistence"
        octarget_check = OCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nctargets = [])
        octarget_check.save()
        
        nctarget_check = NCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), wstargets = [], oc_target = OCTarget.get_by_id(1))
        nctarget_check.save()
        wstarget_check = WSTarget(usage = 4000, participants = 200, experiments = 20, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nc_target = NCTarget.get_by_id(1))
        wstarget_check.save()
        self.assertEqual(is_wst(wstarget_check), True)
        wst_check = WSTarget.get_by_id(1)
        self.assertEqual(wst_check.get("participants"), 200)
        self.assertRaises(TypeError, WSTarget, participants="123")

#+END_SRC


* NCTarget   
#+NAME: class_NCTarget
#+BEGIN_SRC python
args = {"__tablename__": "nctargets",
        "id": db.Column(db.Integer, primary_key = True),
        "usage": db.Column(db.Integer),
        "date": db.Column(db.Date),
        "octarget_id": db.Column(db.Integer, db.ForeignKey('octargets.id')),
        "wstargets": db.relationship('WSTarget', backref='nctarget')
        }

NCTarget = ClassPersistenceTemplate.mk_persistent(NCTarget, **args)

is_nct = is_inst(NCTarget)
check_nctarget = check_pred(is_nct)
#+END_SRC

** Test NCTarget
#+NAME: class_TestNCTarget
#+BEGIN_SRC python
class TestNCTarget(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_nctarget(self):
        print "test_instantiate_nctarget"
        octarget_check = OCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nctargets = [])
        octarget_check.save()
        
        nctarget_check = NCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), wstargets = [], oc_target = OCTarget.get_by_id(1))
        nctarget_check.save()
        self.assertEqual(is_nct(nctarget_check), True)
        nct_check = NCTarget.get_by_id(1)
        self.assertEqual(nct_check.get("usage"), 4000)
        self.assertRaises(TypeError, NCTarget, usage="123")

#+END_SRC

* OCTarget   
#+NAME: class_OCTarget
#+BEGIN_SRC python
args = {"__tablename__": "octargets",
        "id": db.Column(db.Integer, primary_key = True),
        "usage": db.Column(db.Integer),
        "date": db.Column(db.Date),
        "nctargets": db.relationship('NCTarget', backref='octarget')
        }

OCTarget = ClassPersistenceTemplate.mk_persistent(OCTarget, **args)

is_oct = is_inst(OCTarget)
check_octarget = check_pred(is_oct)
#+END_SRC

** Test OCTarget
#+NAME: class_TestOCTarget
#+BEGIN_SRC python
class TestOCTarget(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_octarget(self):
        print "test_instantiate_octarget"
        octarget_check = OCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nctargets = [])
        octarget_check.save()
        self.assertEqual(is_oct(octarget_check), True)
        oct_check = OCTarget.get_by_id(1)
        self.assertEqual(oct_check.get("usage"), 4000)
        self.assertRaises(TypeError, OCTarget, usage="123")

#+END_SRC


* Status   
#+NAME: class_Status
#+BEGIN_SRC python
args = {"__tablename__": "status",
        "id": db.Column(db.Integer, primary_key = True),
        "name": db.Column(db.String)
        }

Status = ClassPersistenceTemplate.mk_persistent(Status, **args)

is_status = is_inst(Status)
check_status = check_pred(is_status)
#+END_SRC

** Test Status
#+NAME: class_TestStatus
#+BEGIN_SRC python
class TestStatus(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_status(self):
        print "test_instantiate_status"
        status_check = Status(name = "pending")
        status_check.save()
        self.assertEqual(is_status(status_check), True)
        stat_check = Status.get_by_id(1)
        self.assertEqual(stat_check.get("name"), "pending")
        self.assertRaises(TypeError, Status, name = 123)

#+END_SRC

* Type   
#+NAME: class_Type
#+BEGIN_SRC python
args = {"__tablename__": "types",
        "id": db.Column(db.Integer, primary_key = True),
        "name": db.Column(db.String)
        }

Type = ClassPersistenceTemplate.mk_persistent(Type, **args)

is_type = is_inst(Type)
check_type = check_pred(is_type)
#+END_SRC

** Test Type
#+NAME: class_TestType
#+BEGIN_SRC python
class TestType(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_type(self):
        print "test_instantiate_type"
        type_check = Type(name = "photo")
        type_check.save()
        self.assertEqual(is_type(type_check), True)
        typ_check = Type.get_by_id(1)
        self.assertEqual(typ_check.get("name"), "photo")
        self.assertRaises(TypeError, Type, name = 123)

#+END_SRC


* Artefact   
#+NAME: class_Artefact
#+BEGIN_SRC python
args = {"__tablename__": "artefacts",
        "id": db.Column(db.Integer, primary_key = True),
        "name": db.Column(db.String),
        "path": db.Column(db.String),
        "workshop_id": db.Column(db.Integer, db.ForeignKey('workshops.id')),
        "a_type_id": db.Column(db.Integer, db.ForeignKey('types.id'))
        }

Artefact = ClassPersistenceTemplate.mk_persistent(Artefact, **args)

is_artefact = is_inst(Artefact)
check_artefact = check_pred(is_artefact)
#+END_SRC

** Test Artefact
#+NAME: class_TestArtefact
#+BEGIN_SRC python
class TestArtefact(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_instantiate_artefact(self):
        print "test_instantiate_artefact"
        a_type = Type(name = "photo")
        a_type.save()
        artefact_check = Artefact(name = "photo", 
                                  path = "/main/photos", 
                                  a_type = Type.get_by_id(1))
        artefact_check.save()
        self.assertEqual(is_artefact(artefact_check), True)
        art_check = Artefact.get_by_id(1)
        self.assertEqual(art_check.get("name"), "photo")
        self.assertRaises(TypeError, Artefact, name = "123")

#+END_SRC

* Workshop
  A workshop is an entity that takes two arguments Institute, and Target.

#+NAME: class_Workshop
#+BEGIN_SRC python
args = {"__tablename__": "workshops",
        "id": db.Column(db.Integer, primary_key = True),
        "name_id": db.Column(db.Integer, db.ForeignKey('names.id')),
        "institute_id": db.Column(db.Integer, db.ForeignKey('institutes.id')),
        "ws_target_id": db.Column(db.Integer, db.ForeignKey('wstargets.id')),
        "artefacts": db.relationship('Artefact', backref = 'workshop'),
        "status_id": db.Column(db.Integer, db.ForeignKey('status.id')),
        "nc_id": db.Column(db.Integer, db.ForeignKey('ncs.id')),
        "a_date": db.Column(db.Date),
        "a_participants": db.Column(db.Integer),
        "a_experiments": db.Column(db.Integer),
        "a_usage": db.Column(db.Integer)
        }

Workshop = ClassPersistenceTemplate.mk_persistent(Workshop, **args)


is_wkshp = is_inst(Workshop)
check_workshop = check_pred(is_wkshp)

#+END_SRC

** Test Workshop

   Test cases to test workshop entity

#+NAME: class_TestWorkshop
#+BEGIN_SRC python
class TestWorkshop(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    print "Test create workshop"
    def test_instatiate_Workshop(self):
        print "test_instantiate_workshop"
        status = Status(name = "pending")
        status.save()
        oc_target = OCTarget(usage = 400, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nctargets = [])
        nc_target = NCTarget(usage = 400, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), oc_target = oc_target, wstargets = [])
        oc_target.save()
        inst1 = Institute(name="IIIT",address="Hyderabad")
        inst1.save()
        inst2 = Institute(name="NIT",address="Suratkal")
        inst2.save()
        
        nc_target.save()
        wstarget_check = WSTarget(usage = 4000, participants = 200, experiments = 20, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nc_target = nc_target)
        wstarget_check.save()
        oc = OC(institute = Institute.get_by_id(1), spokes = [], oc_target = None)
        oc.save()
        nc = NC(institute = Institute.get_by_id(2), hub = OC.get_by_id(1), nc_target = None, workshops = [])
        nc.save()

        workshop = Workshop(name=Name(name="Test workshop"), 
                            institute=Institute(name="IIITH",address="Hyderabad"), 
                            ws_target = wstarget_check, 
                            status = status, 
                            artefacts = [], 
                            nc = nc,
                            a_date = None,
                            a_participants = 0,
                            a_experiments = 0,
                            a_usage = 0)
        workshop.save()
        self.assertEqual(is_wkshp(workshop), True)
        workshop = Workshop.get_by_id(1)
        self.assertEqual(workshop.get("name").get("name"), "Test workshop")

#+END_SRC
  
* OC
  =OC= is an entity that has an attribute =institute= of type =Institute= and =spokes= of type =list of nc's= where =nc= is of type =NC=.

#+NAME: class_OC
#+BEGIN_SRC python
args = {"__tablename__": "ocs",
	"id": db.Column(db.Integer, primary_key=True),
        "institute_id": db.Column(db.Integer, db.ForeignKey('institutes.id')),
        "spokes": db.relationship('NC', backref='hub'),
        "oc_target": db.Column(db.Integer, db.ForeignKey('octargets.id'))
	}

OC = ClassPersistenceTemplate.mk_persistent(OC, **args)

is_oc = is_inst(OC)
check_oc = check_pred(is_oc)

#+END_SRC

** Test OC
#+NAME: class_TestOC
#+BEGIN_SRC python
class TestPersistenceOC(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_oc(self):
        print "test_create_oc"
       
        inst = Institute(name="IIIT",address="Hyderabad")
        inst.save()
        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_target = None)
        oc.save()

        self.assertEqual(is_oc(oc), True)
        oc = OC.get_by_id(1)
        self.assertEqual(oc.get("institute").get("name"), "IIIT")

    def test_get_spokes_of_oc(self):
        print "test_get_spokes_of_oc"
        
        inst1 = Institute(name="IIIT",address="Hyderabad")
        inst1.save()
        inst2 = Institute(name="NIT",address="Suratkal")
        inst2.save()
        inst3 = Institute(name="IIT",address="Hyderabad")
        inst3.save()
        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_target = None)
        oc.save()
        self.assertEqual(is_oc(oc), True)

        oc = OC.get_by_id(1)

        nc1 = NC(institute=Institute.get_by_id(2), hub=OC.get_by_id(1), nc_target = None, workshops = [])
        nc1.save()

        nc2 = NC(institute=Institute.get_by_id(3), hub=OC.get_by_id(1), nc_target = None, workshops = [])
        nc2.save()
        
        oc=OC.get_by_id(1)
        list=oc.spokes
        
        self.assertEqual(list[0].get("institute").get("name"), "NIT")
        self.assertEqual(list[1].get("institute").get("name"), "IIT")
           
#+END_SRC

* NC
  =NC= is an entity that has an attribute =institute= of type =Institute= and =hub= of type =OC=.

#+NAME: class_NC
#+BEGIN_SRC python
args = {"__tablename__": "ncs",
	"id": db.Column(db.Integer, primary_key=True),
        "institute_id": db.Column(db.Integer, db.ForeignKey('institutes.id')),
        "hub_id": db.Column(db.Integer, db.ForeignKey('ocs.id')),
        "nc_target": db.Column(db.Integer, db.ForeignKey('nctargets.id')),
	"workshops": db.relationship('Workshop', backref = 'nc')
        }

NC = ClassPersistenceTemplate.mk_persistent(NC, **args)

is_nc = is_inst(NC)
check_nc = check_pred(is_nc)

#+END_SRC

** Test NC
#+NAME: class_TestNC
#+BEGIN_SRC python
class TestPersistenceNC(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_nc(self):
        print "test_create_nc"

        inst1 = Institute(name="NIT",address="Suratkal")
        inst1.save()
        inst2 = Institute(name="IIIT",address="Hyderabad")
        inst2.save()
        
        octarget_check = OCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), nctargets = [])
        octarget_check.save()
        
        nctarget_check = NCTarget(usage = 4000, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date(), wstargets = [], oc_target = OCTarget.get_by_id(1))
        nctarget_check.save()
        
        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_target = None)
        oc.save()
        nc = NC(institute=Institute.get_by_id(2), hub=OC.get_by_id(1), nc_target = None, workshops = [])
        nc.save()
        self.assertEqual(is_nc(nc), True)
        nc = NC.get_by_id(1)
        self.assertEqual(nc.get("institute").get("name"), "IIIT")
#+END_SRC


* Role
  =Role= is an entity that has an attribute =name= which is an alphabetic string

#+NAME: class_Role
#+BEGIN_SRC python
args = {"__tablename__": "roles",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(128), unique=True, nullable=False),
        "centre_oc_id": db.Column(db.Integer, db.ForeignKey('ocs.id'), nullable=True),
        "centre_nc_id": db.Column(db.Integer, db.ForeignKey('ncs.id'), nullable=True),
	}

Role = ClassPersistenceTemplate.mk_persistent(Role, **args)

is_role = is_inst(Role)
check_role = check_pred(is_role)

#+END_SRC

** Test Role
#+NAME: class_TestRole
#+BEGIN_SRC python
class TestPersistenceRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_admin_role(self):
        print "test_create_role"
        ro = Role(name="admin",centre_oc=None, centre_nc=None)
        ro.save()
        self.assertEqual(is_role(ro), True)
        ro = Role.get_by_id(1)
        self.assertEqual(ro.get("name"), "admin")


    def test_create_oc_role(self):
        print "test_create_oc_role"

        inst = Institute(name="IIT",address="Hyderabad")
        inst.save()
        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_target = None)
        oc.save()

        ro = Role(name="OC",centre_oc=OC.get_by_id(1), centre_nc=None)
        ro.save()
        self.assertEqual(is_role(ro), True)
        ro = Role.get_by_id(1)
        self.assertEqual(ro.get("name"), "OC")
        self.assertEqual(ro.get("centre_oc").get("institute").get("name"), "IIT")

    def test_create_nc_role(self):
        print "test_create_nc_role"

        inst1 = Institute(name="IIT",address="Hyderabad")
        inst1.save()

        inst2 = Institute(name="IIIT",address="Hyderabad")
        inst2.save()
        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_target = None)
        oc.save()

        nc = NC(institute=Institute.get_by_id(2), hub=oc, nc_target = None, workshops = [])
        nc.save()

        ro = Role(name="NC", centre_nc=NC.get_by_id(1), centre_oc=None)
        ro.save()
        self.assertEqual(is_role(ro), True)
        
        ro = Role.get_by_id(1)
        self.assertEqual(ro.get("name"), "NC")
        self.assertEqual(ro.get("centre_nc").get("institute").get("name"), "IIIT")
#+END_SRC

   
* User
  A =User= entity has fields =name= of type =Name=, =email= of type =Email= and
  role of type =Role=.

#+NAME: class_association_Table
#+BEGIN_SRC python
user_roles = db.Table('user_roles',
		      db.Column('user_id',db.Integer, db.ForeignKey('users.id')),
		      db.Column('role_id',db.Integer,db.ForeignKey('roles.id')))
#+END_SRC


#+NAME: class_User
#+BEGIN_SRC python
args = {"__tablename__": "users",
        "id": db.Column(db.Integer, primary_key=True),
        "name_id": db.Column(db.Integer, db.ForeignKey('names.id')),
        "email_id": db.Column(db.Integer, db.ForeignKey('emails.id')),
        "user_status": db.Column(db.String(128), nullable=False),
        "roles":db.relationship('Role', secondary=user_roles, backref='users') 
        }


User = ClassPersistenceTemplate.mk_persistent(User, **args)

is_user = is_inst(User)
check_user = check_pred(is_user)

#+END_SRC

** Test User
#+NAME: class_TestUser
#+BEGIN_SRC python
class TestPersistenceUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_user(self):
        print "test_create_user"
        na = Name(name="Jimi Hendrix")
        na.save()
        em = Email(email="jimi@gnu.org")
        em.save()

        ro1 = Role(name="user",centre_oc=None, centre_nc=None)
        ro1.save()

        ro2 = Role(name="guest",centre_oc=None, centre_nc=None)
        ro2.save()

        roles = [ro1, ro2] 
        usr = User(name=na, email=em, roles=roles, user_status="active")
        usr.save()
        self.assertEqual(is_user(usr), True)
        n_usr = User.get_by_id(1)
        self.assertEqual(n_usr.get("email").get('email'), "jimi@gnu.org")
 
#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.utils.class_persistence_template import *
from sqlalchemy.types import Date
import datetime
#+end_src


** Tests
*** Imports for tests 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from entities import *
from runtime.rest.app import create_app
from sqlalchemy.types import Date
import datetime

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()
#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_Institute>>


<<class_OCTarget>>
<<class_NCTarget>>
<<class_WSTarget>>
<<class_OC>>
<<class_NC>>
<<class_Status>>
<<class_Type>>
<<class_Artefact>>
<<class_Workshop>>
<<class_Name>>
<<class_Email>>
<<class_association_Table>>
<<class_Role>>
<<class_User>>
#+end_src

** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestInstitute>>
<<class_TestWSTarget>>
<<class_TestNCTarget>>
<<class_TestOCTarget>>
<<class_TestOC>>
<<class_TestNC>>
<<class_TestStatus>>
<<class_TestType>>
<<class_TestArtefact>>
<<class_TestWorkshop>>
<<class_TestRole>>
<<class_TestUser>>
<<class_TestName>>
<<class_TestEmail>>
<<run_test_cases>>
#+end_src
