
#+TITLE: Entities
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

In the object implementation of the Outreach Portal, 
all entities are Objects.  In addition, there is an object 
called =System= that holds the state of the application 
(=user-set=, =session-set=, etc.).

Each of the entities of the data model is implemented as
an object.  Each entity is defined via a class definition, a
constructor and getter and setter methods that access and
mutate the fields of the entity. 

The main idea in the object model is that certain relations
of the data model (those that are total functions) are
implemented as /fields/.  For example the =User= object has
a field called =email= that holds an object of type =Email=.

As a start, we do not implement all relations of the data
model.  For example, the relation =user: Email > User?= is
not implemented.  It should be, if we desire to have an
implementation that is /complete/ with respect to the data
model.  Which elements of the data model are implemented and
which are not are decisions based on the end user
requirements of the application.


* Name

=Name= is a value class with type =is_alphabetic_str=.

#+NAME: class_Name
#+begin_src python
Name = ClassTemplate.mk_class("Name", name=is_alphabetic_str)
is_name = is_inst(Name)
check_name = check_pred(is_name)

#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestName(TestCase):
    TESTING = True

    def test_instantiate_name(self):
        print "test_instantiate_name"
        self.assertEqual(is_name(Name(name="Jimi Hendrix")), True)
        self.assertEqual(Name(name="Jimi Hendrix").get("name"), "Jimi Hendrix")
        self.assertRaises(TypeError, Name, name="Jimi 123 Hendrix")

#+END_SRC


* Email
=Name= is a value class with type =is_email_str=.
#+NAME: class_Email
#+begin_src python
Email = ClassTemplate.mk_class("Email", email=is_email_str)

Email.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("email") == other.get("email")

is_email = is_inst(Email)
check_email = check_pred(is_email)

#+end_src

** Test Email
#+NAME: class_TestEmail
#+BEGIN_SRC python
class TestEmail(TestCase):
    TESTING = True

    def test_instantiate_email(self):
        print "test_instantiate_email"
        self.assertEqual(is_email(Email(email="jimi@gnu.org")), True)
        self.assertEqual(Email(email="jimi@gnu.org").get("email"),
                         "jimi@gnu.org")
        self.assertRaises(TypeError, Name, name="jimi@@gnu.org")


    def test_equality_of_email(self):
        print "test_equality_of_email"
        em1 = Email(email="jimi@gnu.org")
        self.assertEqual(em1 == em1, True)

        em2 = Email(email="didley@gnu.org")
        self.assertEqual(em1 == em2, False)

#+END_SRC


* OC
  A =OC= entity has fields =name= of type =Name=,
  institute of type =Institute=.

#+NAME: class_OC
#+BEGIN_SRC python
def are_spokes(spo):
    ret_val = True
    if is_list(spo):
	for nc in spo:
	    if not is_nc(nc):
		ret_val = False
    else:
	ret_val = True

    return ret_val
OC= ClassTemplate.mk_class("OC",institute=is_institute,spokes=are_spokes)

OC.__eq__ = lambda self,other: \
	    isinstance(other, self.__class__) and \
	    self.get("institute") == other.get("institute")

def append_spoke(self,spoke):
    if is_nc(spoke):
	spokes = self.get('spokes')
	spokes.append(spoke)
	self.set(spokes=spokes)

OC.append_spoke = append_spoke


is_oc = is_inst(OC)
check_oc = check_pred(is_oc)

def to_client(self):
    return {
	'institute': self.get("institute").to_client()
    }
#+END_SRC


       
#+END_SRC

** Test OC

#+NAME: class_TestOC
#+BEGIN_SRC python
class TestOC(TestCase):
    TESTING = True

    def test_instatiate_OC(self):
        print "test_instantiate_user"
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"),spokes=[])

        self.assertEqual(is_oc(oc), True)


    def test_sets_spokes_on_OC(self):
        print "test_sets_spokes_on_oc"
        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"),spokes=[])

        nc = NC(institute=Institute(name="HCU",address="Hyderabad"), hub=oc)
        self.assertEqual((nc.get("institute")).get("name"), "HCU")

        oc.set(spokes=[nc])

        self.assertEqual(oc.get('spokes')[0].get("institute").get("name"), "HCU")


    def test_to_client_OC(self):
        print "test_to_client_oc"

        oc = OC(institute=Institute(name="IIITH",address="Hyderabad"),spokes=[])
        oc_dict =  oc.to_client()

        self.assertEqual("IIITH", oc_dict['institute']['name'])
        self.assertEqual("Hyderabad", oc_dict['institute']['address'])


#+END_SRC



* NC
  A =NC= entity has fields =name= of type =Name=,
 institute of type =Institute=.
#+NAME: class_NC
#+BEGIN_SRC python

NC= ClassTemplate.mk_class("NC", institute=is_institute, hub=is_oc)

is_nc = is_inst(NC)
check_nc = check_pred(is_nc)

#+END_SRC

** Test NC

#+NAME: class_TestOC
#+BEGIN_SRC python
class TestNC(TestCase):
    TESTING = True

    def test_instatiate_NC(self):
        print "test_instantiate_user"
        nc = NC(institute=Institute(name="HCU",address="Hyderabad"), hub=OC(institute=Institute(name="IIITH", address="Hyderabad"),spokes=[]))

        self.assertEqual(is_nc(nc), True)

#+END_SRC


* Role
   =Role= is an entity that has a field =name= which is an alphabetic string

#+NAME: class_Role
#+BEGIN_SRC python
def is_centre_oc(value):
    if value == None or is_oc(value):
        return True
    else:
        return False
def is_centre_nc(value):
    if value == None or is_nc(value):
        return True
    else:
        return False

   
Role = ClassTemplate.mk_class("Role", 
                              name=is_alphabetic_str,
                              centre_oc=is_centre_oc,centre_nc=is_centre_nc)

is_role = is_inst(Role)
check_role = check_pred(is_role)

def are_roles(rls):
    ret_val = True

    if is_list(rls):
        for rl in rls:
            if not is_role(rl):
                ret_val = False
    else:
        ret_val = True

    return ret_val

Role.admin = Role(name="admin",centre_oc=None,centre_nc=None)
Role.reviewer = Role(name="reviewer",centre_oc=None,centre_nc=None)
Role.guest = Role(name="guest",centre_oc=None,centre_nc=None)
Role.noc = Role(name="NOC",centre_oc=None,centre_nc=None)
Role.is_admin = lambda role: role.name == 'admin'
Role.is_reviewer = lambda role: role.name == 'reviewer'
Role.is_guest = lambda role: role.guest == 'guest'

#+END_SRC

** Test Role
#+NAME: class_TestRole
#+BEGIN_SRC python
class TestRole(TestCase):
    TESTING = True

    def test_instantiate_role(self):
        print "test_instantiate_role"
        self.assertEqual(is_role(Role(name="admin", centre_oc=None,centre_nc=None)), True)
        a_role = Role(name="admin", centre_oc=None,centre_nc=None)
        self.assertEqual(check_role(a_role), a_role)
        self.assertEqual(Role(name="admin", centre_oc=None,centre_nc=None).get("name"), "admin")
        self.assertRaises(TypeError, Role, name="admin123", centre=None)

    def test_set_and_get_role(self):
        print "test_sets_on_role"
        u_role = Role(name="guest", centre_oc=None,centre_nc=None)
        self.assertEqual(u_role.get("name"), "guest")
        u_role.set(name="admin")
        self.assertEqual(u_role.get("name"), "admin")

    def test_set_and_get_centre(self):
        print "test_set_and_get_centre"
        oc = OC(institute=Institute(name="IIITH", address="Hyderabad"),spokes=[])
        occ_role = Role(name="OCC", centre_oc=oc,centre_nc=None)
        self.assertEqual(occ_role.get("name"), "OCC")
        self.assertEqual(occ_role.get("centre_oc"), oc)

#+END_SRC


* User
  A =User= entity has fields =name= of type =Name=, =email= of type =Email= and
  role of type =Role=.

#+NAME: class_User
#+BEGIN_SRC python
def is_user_status(s):
    ret_val = True

    if is_str(s) and (s=="active" or s=="inactive"):
        ret_val = True
    else:        
        ret_val = False



    return ret_val



User = ClassTemplate.mk_class("User", 
                              name=is_name, 
                              email=is_email,
                              roles=are_roles,
                              user_status=is_user_status
                              )


User.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("email") == other.get("email")

def append_role(self,role):
    if is_role(role):
        roles = self.get('roles')
        roles.append(role)
        #self.set(roles=roles)
User.append_role = append_role

is_user = is_inst(User)
check_user = check_pred(is_user)

#+END_SRC

** Test User
#+NAME: class_TestUser
#+BEGIN_SRC python
class TestUser(TestCase):
    TESTING = True

    def test_instantiate_user(self):
        print "test_instantiate_user"
        user = User(name=Name(name="Jimi Hendrix"),
                    email=Email(email="jimi@gnu.org"),
                    roles=[],user_status="active")
        self.assertEqual(is_user(user), True)

    def test_sets_on_user(self):
        print "test_sets_on_user"
        user = User(name=Name(name="Jimi Hendrix"),
                    email=Email(email="jimi@gnu.org"),
                    roles=[Role(name="guest", centre_oc=None,centre_nc=None)],
                    user_status="active"
                   )

        self.assertEqual(user.get("name").get("name"), "Jimi Hendrix")
        self.assertEqual(user.get("email").get("email"), "jimi@gnu.org")
        self.assertEqual(user.get("roles")[0].get("name"), "guest")
        self.assertEqual(user.get("user_status"),"active")
    def test_equality_on_user(self):
        print "test_equality_on_user"
        user1 = User(name=Name(name="Jimi Hendrix"),
                     email=Email(email="jimi@gnu.org"),
                     roles=[],user_status="active"
                    )
        self.assertEqual(user1 == user1, True)
        
    def test_append_role(self):
        print "test_append_role"
        user = User(name=Name(name="Jimi Hendrix"),
                     email=Email(email="jimi@gnu.org"),
                     roles=[],user_status="active")
        user.append_role(Role(name="guest",centre_oc=None,centre_nc=None))
        self.assertTrue(len(user.get('roles'))==1)

#+END_SRC


* Institute

=Institute= is an entity that has two fields =name= which is an alphabetic
string and =address= which is a string

#+NAME: class_Institute
#+BEGIN_SRC python

Institute = ClassTemplate.mk_class("Institute", name=is_alphabetic_str, address=is_str)
is_institute = is_inst(Institute)
check_institute = check_pred(is_institute)

def to_client(self):
    return {
	'name': self.get("name"),
        'address': self.get("address")
    }

#+END_SRC

** Test Institute
#+NAME: class_TestInstitute
#+BEGIN_SRC python
class TestInstitute(TestCase):
    TESTING = True

    def test_instantiate_institute(self):
        print "test_instantiate_institute"
        self.assertEqual(is_institute(Institute(name="IIIT",address="Hyderabad")), True)
        institute_ex = Institute(name="IIIT",address="Hyderabad")
        self.assertEqual(check_institute(institute_ex), institute_ex)
        self.assertEqual(check_institute(institute_ex).get("name"), "IIIT")
        self.assertRaises(TypeError, Institute, name="IIIT123")
#+END_SRC
   

* Status
   =Status= is an entity that has a field =name= which is an alphabetic string

#+NAME: class_Status
#+BEGIN_SRC python
Status = ClassTemplate.mk_class("Status", name=is_alphabetic_str)

is_status = is_inst(Status)
check_status = check_pred(is_status)


Status.pending = Status(name="pending")
Status.cancelled = Status(name="cancelled")
Status.completed = Status(name="completed")
Status.pending_approval = Status(name="pending for approval")
Status.rejected = Status(name="rejected")
Status.approved = Status(name="approved")

Status.is_pending = lambda status: status.name == 'pending'
Status.is_cancelled = lambda status: status.name == 'cancelled'
Status.is_completed = lambda status: status.name == 'completed'
Status.is_pending_approval = lambda status: status.name == 'pending for approval'
Status.is_rejected = lambda status: status.name == 'rejected'
Status.is_approved = lambda status: status.name == 'approved'
#+END_SRC

** Test Status
#+NAME: class_TestStatus
#+BEGIN_SRC python
class TestStatus(TestCase):
    TESTING = True

    def test_instantiate_status(self):
        print "test_instantiate_status"
        self.assertEqual(is_status(Status(name="completed")), True)
        a_status = Status(name="completed")
        self.assertEqual(check_status(a_status), a_status)
        self.assertEqual(Status(name="completed").get("name"), "completed")
        self.assertRaises(TypeError, Status, name="invalid123")

    def test_set_and_get_status(self):
        print "test_sets_on_status"
        u_status = Status(name="completed")
        self.assertEqual(u_status.get("name"), "completed")
        u_status.set(name="pending for approval")
        self.assertEqual(u_status.get("name"), "pending for approval")
    
#+END_SRC



* Artefact
#+NAME: class_Artefact
#+BEGIN_SRC python
Artefact = ClassTemplate.mk_class("Artefact", name=is_alphabetic_str,
path=is_string)

is_artefact = is_inst(Artefact)
check_artefact = check_pred(is_artefact)

#+END_SRC

** Test Artefact
#+NAME: class_TestArtefact
#+BEGIN_SRC python
class TestArtefact(TestCase):
    TESTING = True

    def test_instantiate_artefact(self):
        print "test_instantiate_artefact"
        self.assertEqual(is_artefact(Artefact(name="attendance", path="/home")), True)
        self.assertEqual(Artefact(name="attendance", path="/home").get("name"),
                         "attendance")
        self.assertRaises(TypeError, Artefact, name="123")

#+END_SRC




* WSTarget
#+NAME: class_WSTarget
#+BEGIN_SRC python
WSTarget = ClassTemplate.mk_class("WSTarget", participants = is_int, experiments = is_int, date = is_date)

is_wstarget = is_inst(WSTarget)
check_wstarget = check_pred(is_wstarget)

#+END_SRC

** Test WSTarget
#+NAME: class_TestWSTarget
#+BEGIN_SRC python
class TestWSTarget(TestCase):
    TESTING = True

    def test_instantiate_wstarget(self):
        print "test_instantiate_wstarget"
        wstarget_check = WSTarget(participants = 200, experiments = 20, date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date())
        self.assertEqual(is_wstarget(wstarget_check), True)
        self.assertEqual(wstarget_check.get("participants"), 200)
        self.assertRaises(TypeError, WSTarget, participants="123")

#+END_SRC


* NCTarget
#+NAME: class_NCTarget
#+BEGIN_SRC python
NCTarget = ClassTemplate.mk_class("NCTarget", usage = is_int, date = is_date, wstargets = is_list )

is_nctarget = is_inst(NCTarget)
check_nctarget = check_pred(is_nctarget)

#+END_SRC

** Test NCTarget
#+NAME: class_TestNCTarget
#+BEGIN_SRC python
class TestNCTarget(TestCase):
    TESTING = True

    def test_instantiate_nctarget(self):
        print "test_instantiate_nctarget"
        date_check = "30-06-2016"
        date_format = "%d-%m-%Y"
        nctarget_check = NCTarget(usage=300, wstargets = [],  date = datetime.datetime.strptime(date_check, date_format).date())
        self.assertEqual(is_nctarget(nctarget_check), True)
        self.assertEqual(nctarget_check.get("usage"), 300)
        self.assertRaises(TypeError, NCTarget, usage = "abc")

#+END_SRC





* Workshop
  A workshop is an entity that takes two arguments Institute, and Target.

#+NAME: class_Workshop
#+BEGIN_SRC python
Workshop = ClassTemplate.mk_class("Workshop", name=is_name, institute=is_institute)
is_workshop = is_inst(Workshop)
check_workshop = check_pred(is_workshop)

#+END_SRC

** Test Workshop

   Test cases to test workshop entity

#+NAME: class_TestWorkshop
#+BEGIN_SRC python
class TestWorkshop(TestCase):
    TESTING = True
    print "Test create workshop"
    def test_instatiate_Workshop(self):
        print "test_instantiate_user"
        workshop = Workshop(name=Name(name="Test workshop"),institute=Institute(name="IIITH",address="Hyderabad"))
        self.assertEqual(is_workshop(workshop), True)
    

#+END_SRC
  
   
* Session
    A session stores the user information.  The session object defines the set
    of operations allowed by the system.  

#+NAME: class_Session
#+BEGIN_SRC python
Session = ClassTemplate.mk_class("Session", user=is_user, role=is_role)

is_session = is_inst(Session)
check_session = check_pred(is_session)

#+END_SRC
** Test Session

   Test cases to test Seesion entity

#+NAME: class_TestSession
#+BEGIN_SRC python
class TestSession(TestCase):
    TESTING = True

    def test_instantiate_session(self):
        print "test_instantiate_user"
        user = User(name=Name(name="Jimi Hendrix"),
                    email=Email(email="jimi@gnu.org"),
                    roles=[],user_status="active"
                   )
        role = Role(name="admin", centre_oc=None,centre_nc=None)
        session = Session(user=user, role=role)
        self.assertEqual(is_session(session), True)

    def test_sets_on_session(self):
        print "test_sets_on_session"
        user = User(name=Name(name="Jimi Hendrix"),
                    email=Email(email="jimi@gnu.org"),
                    roles=[],user_status="active"
                   )
        role = Role(name="admin", centre_oc=None,centre_nc=None)
        session = Session(user=user, role=role)

        user = User(name=Name(name="Bo Didley"),
                    email=Email(email="didley@gnu.org"),
                    roles=[],user_status="active"
                   )

        session.set(user=user)
        self.assertEqual(session.get("user").get("email").get("email"),
                         "didley@gnu.org")

#+END_SRC



   
* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.utils.type_utils import *
from runtime.utils.class_templates import *
from runtime.exceptions.exceptions import *
import datetime
#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from runtime.utils.type_utils import *
from runtime.utils.class_templates import *
from entities import *
import datetime
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_Name>>
<<class_Email>>
<<class_Institute>>
<<class_OC>>
<<class_NC>>
<<class_Role>>
<<class_User>>
<<class_Session>>
<<class_Workshop>>
<<class_Status>>
<<class_Artefact>>
<<class_WSTarget>>
<<class_NCTarget>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestName>>
<<class_TestEmail>>
<<class_TestRole>>
<<class_TestUser>>
<<class_TestInstitute>>
<<class_TestOC>>
<<class_TestNC>>
<<class_TestSession>>
<<class_TestWorkshop>>
<<class_TestStatus>>
<<class_TestArtefact>>
<<class_TestWSTarget>>
<<class_TestNCTarget>>
<<run_test_cases>>

#+end_src
