#+TITLE: Outreach Portal 3.0 Data Model
#+AUTHOR: VLEAD
#+DATE: [2016-06-03 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export
* Notation
** Sets, cardinality and relations

If =A= is a set, then
    1. =A!= denotes exactly one element of =A=.
    2. =A?= denotes at most one element of =A=.
    3. =A+= denotes  one or more elements of =A=
    4. =A*=  denotes at zero or more elements of =A=.  Often
       abbreviated as =A=.

    5. =A > B= denotes a relation /from/ =A= /to/ =B=.


** Relations and their cardinality type

A relation =r:A > B= could relate each element of =A= to
zero, one or more elements of =B=.

|--------------------------------+-----------+---+---|
| Cardinality of B               | Notation  |   |   |
|--------------------------------+-----------+---+---|
| at least zero elements of =B=. | r: A > B  |   |   |
|--------------------------------+-----------+---+---|
| at most one element of =B=     | r: A > B? |   |   |
|--------------------------------+-----------+---+---|
| at least one element of =B=    | r: A > B+ |   |   |
|--------------------------------+-----------+---+---|
| exactly one element of =B=     | r: A > B! |   |   |
|--------------------------------+-----------+---+---|
   
** Example of Entity Relationship notation
    
#+begin_example
 [email, user] : User? > Email!
#+end_example

Encodes the following items of information:

 - =email= is a relation /from/ the set =User= /to/ the set
   =Email=.

 - =User= is called the /domain/ of the relation =email=.

 - =Email= is called the /codomain/ of the relation =email=.

 - The relation =email= relates each element of =User= to
   /exactly one/ element of =Email=.  This is written as 

 #+begin_example
 email: User > Email!
 #+end_example

 - =user= is a relation /from/ the set =Email= /to/ the set
   =User=.

 - =Email= is called the /domain/ of the relation =user=.

 - =User= is called the /codomain/ of the relation =user=.

 - The relation =user= relates each element of =Email= to
   /at most one/ element of =User=.  This is written as 

 #+begin_example
 user: Email > User?
 #+end_example


* Abstract Entity Types
#+BEGIN_SRC spec :tangle spec.txt
abbreviation- NC )
TYPE OutreachCentre ( abbreviation- OC )
TYPE Institution
TYPE Session


#+END_SRC

* Relations and cardinality constraints over entity types 
For each relation, we define its inverse next to it.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relations with cardinality constraints

[email, user]          : User?                    > Email!
[name, user]           : User                     > Name!
[roles, users]         : User                     > Role+
[host, oc]             : OC?                      > Institution!
[hub, spokes]          : OC!                      > NC
[host, nc]             : NC?                      > Institution!
[user, session]        : Session                  > User!
[role, session]        : Session                  > Role!

Note: A User can have only one session with a particular role


#+END_SRC

** Keys

An entity =K= is called a /key for/ an entity =A= if there
is a relation =r: A? > K!=.


|---------+---------------|
| Entity  | Key           |
|---------+---------------|
| User    | Email         |
|---------+---------------|
| OC      | Institute     |
|---------+---------------|
| NC      | Institute     |
|---------+---------------|
| Session | User and Role |
|---------+---------------|


* System state
  The system's state is captured by a set of /state
  variables/.  
** Primary Entity sets

For the purpose of /the application/, we maintain eight primary
state variables.  

 #+BEGIN_SRC spec

;;; Primary state variables

Sets
 user-set      : set[User]      ; set of users in the system
 role-set      : set[Role]      ; set of roles in the system
 session-set   : set[Session]   ; set of sessions in the system
 nc-set        : set[NC]        ; set of nodal centres
 oc-set        :  set[OC]       ; set of outreach centres in the system
 institute-set : set[Institute] ; set of institutes in the system
 
Relations
 email [User,Email]
 name  [User,Name]
 roles [User,Role]
 host  [OC,Institute] and [NC,Institute]
 spokes [OC,NC]
 hub    [NC,OC]
 user   [Session,User]
 role   [Session,Role]

 

 #+END_SRC


** Derived Entity sets
#+BEGIN_SRC spec :tangle spec.txt
  name-set           : user-set.name       ; set of names in the system
  email-set          : user-set.email      ; set of emails in the system
  oc-institute-set   : oc-set.host         ; set of institutes in the system associated with an oc
  nc-institute-set   : nc-set.host         ; set of institutes in the system associated with a nc
  logged-in-user-set : session-set.user    ; set of logged in users
    
#+END_SRC

** Referential Integrity Constraints over entity-sets

*** =user-set=


There is atleast one user  whose role is =admin=.

    #+BEGIN_SRC spec :tangle spec.txt

    ;;; The admin-user


    For all elements u in admin-user-set, u belongs to user-set  ; there is atleast
                                                                 ; one user with
                                                                 ; role admin.

    #+END_SRC

These specifications also capture referential integrity.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relation variables with Referential Integrity
[email, user]    :  user-set!    > email-set!
[name, user]     :  user-set+    > name-set!    
[role, user]     :  user-set     > role-set+   
[session, user]  :  user-set!    > session-set?
[host, oc]       :  oc-set?      > institution-set!
[hub, spokes]    :  oc-set!      > nc-set
[host, nc]       :  oc-set?      > institution-set!




#+END_SRC

* Operations 

CRUD operations.  

Each operation is performed on an entity instance or an
entity-set.   The operation may take additional parameters.
It also takes as a  parameter of the credentials of the
actor performing the operation.

 - C  create a user      
 - R  read from a user   
 - U  update a user      
 - D  delete a user      

** Actor

Operations are performed by Actors.  Our application has 
the  actors:  =session=. 

** Add User
*** Parameters
    u: User, s: Session
*** Actor credentials
    s.role==admin or s.role==OCC(OC)
*** Referential Integrity
    s: session-set

*** Effect
    This operation creates a new user with default role being guest.

** Add Role
*** Parameters
    u: User, r: Role, s: Session
*** Actor credentials
    s.role == admin or s.role == OCC(oc)
*** Referential Integrity
    s:session-set
    s.role == admin => r:role-set
    s.role == OCC(oc) =>          
         nc:nc-set
         r==NCC(nc)
         hub(nc) == oc
    u:user-set
*** Effect
    r is added to u.roles

** Create OC
*** Parameters
    i:Institute, s:Session
*** Actor Credentials
    s.role==admin
*** Referential Integrity
    s:session-set
    i:institute-set
    i:~ oc-institute-set 
    i:~ nc-institute-set
*** Result
    role-set' =role-set U OCC(oc)

** Create NC
*** Parameters
    i:Institute, oc:OC, s:Session
*** Actor Credentials
    s.role==admin or s.role==OCC(oc) and oc:oc-set
*** Referential Integrity
    s:session-set
    i:institute-set  
    i:~ nc-institute-set
    if i : oc-institute-set
        i.oc == oc
*** Result
    role-set' =role-set U NCC(nc)
    

**  login
*** Parameters
    u: User, r:Role
*** Actor Credentials
    
*** Referential-Integrity
    u:user-set
    r:role-set
    r:user.roles   
*** Effect
    A session for that user is added to the session-set

** logout 

*** Parameters
    s:Session

*** Referential-Integrity
    s:session-set

*** Effect
    s is removed from the session-set
        
** create audit

*** Parameters
    s:Session, old-data:String, time-stamp:String, primary-key-old:Integer,
    primary-key-current-session:Integer, entity:String 

*** Referential Integrity
    s:session-set
    
*** Remarks
    This function logs an Audit to the database. 
    old-data is a string containing the values of the object before it is changed.
    primary-key-old contains the id of the object being changed
    primary-key-current-session contains the id of the session of the user who is changing the object
       
*** Effect
    An Audit record is created and saved in the database.
 

** delete User
*** Parameters
    u: User, s:  Session
*** Actor credentials
    
    s.role==admin  or s.role==OCC(oc) where oc:oc-set 

*** Referential Integrity
    
    u: user-set
    s: session-set
    u:~logged-in-user-set
    


*** Remarks
   
   An admin can delete any user
   A user with role OCC can delete a user with role NCC only if he belongs to an NC which is a spoke of the OC.

*** Effect
    u is removed from the user-set

** update User
*** Parameters
    n: Name,e:Email, u: User, s:  Session
*** Actor credentials
    
    s.role==admin  or s.role==OCC(OC) or s.role == NCC(NC)

*** Referential Integrity
    
    u: user-set
    s: session-set
       
*** Effect
   
   An admin can update any user.
   A user with role OCC can update a user with role NCC and himself.
   A user with role NCC can update only himself.
   
